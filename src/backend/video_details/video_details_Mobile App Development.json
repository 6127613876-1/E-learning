[
    {
        "video_id": "jtK3RYjEH2I",
        "title": "Lecture 1 -- Introduction to Mobile Application Development",
        "url": "https://www.youtube.com/watch?v=jtK3RYjEH2I",
        "duration": 3004,
        "transcript": "hello everyone welcome to v2 e-sectional myself mr nitin kumar working as an assistant professor in department of computer science and engineering with the avatar college of engineering mysuru i am the course expert for mobile application development the subject code is 18 cs651 firstly i would like to thank the person who has framed this syllabus as an open elective why because the contents which are present in this particular syllabus it is completely correlated with the contents which are available in google for certification program so if we divide the syllabus so the syllabus consists of five modules out of those five modules the first two modules deals with activities and intents and the basic designs how to design the mobile application so the remaining three modules deals with how to publish an application what are the security features that you have to consider in your mobile applications while development along with that how to make use of databases and how to develop an interactive application that you're going to learn so totally five modules the contents which are present in this five modules will make the syllabus of associate android developer certification so if you are done with the contents of this five modules you can easily take up the certification examination that is provided by the google on android platform the certification name is associate android developer certification so which can be taken in two languages one is either in java or in kotlin as per your syllabus that is present in vtu so the subject is should be taught using java programming language coming to the subject my subject name is mobile application development and the code is 18cs651 so before we start with the what is development and other things firstly we should know what is mobile application what is mobile application so why because without knowing what is mobile applications so it is not possible to understand what is development so coming to this mobile application means nothing but the facebook instagram whatsapp the apps that you're going to use in your mobile such applications are called mobile applications don't feel that only the applications that you are going to use in your mobile mobile application even in your smart watches we can develop the mobile applications for smart watches we can develop the mobile application nowadays for automotive such as for example the sound system present in your car that's also in a mobile application and for example the nowadays the tv smart tv the name is android tv that will also make use of android so coming to this mobile application so it's nothing but the applications that you're going to develop for mobile devices are called mobile applications so we can divide this mobile applications into three categories the development developing the mobile application for your mobile devices is called mobile application development which can be categorized into three categories one is based on android one is completely based on android operating system android operating system it's nothing but a linux based operating system it's an open source other one is based on ios i guess you are well versed with this term ios why because ios is nothing but it is commonly used it is commonly used only in apple devices so next one is flutter these are the three ways or these are the three platforms that we have for developing the mobile applications so what is this android mobile application development means so android o mobile development means so where we are going to make use of a tool by name android studio by name android studio to develop the android application so if you develop the application by using this android studio men's so it will work only in your android devices the applications which are developed by using this android studio will be compatible only with the android devices similarly if you develop applications using ios means those application will be compatible only with the apple devices such as apple smart smartphones apple tabs so whatever the application that you are going to develop by using this ios platform which will be compatible with the apple devices so coming to this flutter so this is also called as an ibreed platform what is this hybrid platform is so whatever the applications that you're going to develop by using this flutter will be compatible both with the apple devices as well as android devices so coming to this up these are the frameworks that we are going to use android studio ios and flutter so which are all the languages why because framework is not a complete development tool framework is a tool that's it so inside the framework you have to make use of programming language to develop the applications so which are all the programming languages we need to use the programming languages that we are going to use for the android application development is java as well as kotlin so initially when i started working with this android in year 2016 it was completely java there was no kotlin at all so in 2020 this quarterly award so by 2023 google is giving a statement that they are going to completely remove this java and they are going to replace the kotlin for mobile application development but the thing is so the framework will remain the same just the change change that is happening here is only the programming language will change previously it was java now we have kotlin next down the line there might be some other user friendly programming language may arrive that we can use for the mobile application development the programming languages will keep on changing but the framework will remain the same the outcome of this subject is you must learn how to make use of this android studio don't worry about this program why because the programming languages will keep on changing but the framework will remain the same similarly with respect to ios devices the apple devices the programming language that we are going to use right now is shift the programming language that we are using is swift programming language we will use to develop the apple applications which will be compatible only with the ios devices coming to the programming language that we are going to use with respect to flutter is dart dart dart so if you develop what's the advantage of this flutter application means so whatever the application mobile application that you're going to develop using flutter will be compatible both with the ios as well as android os that's the advantage of flutter but as per your syllabus coming to confining to your syllabus these are the three ways you can develop the mobile application one this by using android other one is by using ios other one is by using flutter so if we confine your syllabus so as per your syllabus you must learn how to make use of android studio using java this is your complete syllabus the syllabus that is present in 18 cs651 deals with android studio using java programming language so why why i need to study this particular subject what's the importance what's the importance just if you understand just if you look at the global market so when i was a student so i need i i used to go to web applications i need to browse the web applications to get the required information or features but nowadays whatever the web applications are there for them the corresponding mobile app will be there in your google play store that indicates the importance of this subject so as the number of application increases the number of roles for the mobile application developer increases so if you know this mobile application development you can easily you can easily be industry ready so coming to this mobile application development how many users are there so if you consider 100 percent mobile person mobile users in world involved out of 100 71 percent users are android users 71 percent users are using android so in india if you consider this scenario in india 95 percent users are android users as i mentioned earlier there are only three flavors of mobile applications and three flavors of operating systems so android operating system and ios devices other than that we will have microsoft nokia lumia such devices and their market is very low so if you consider the world market out of 100 71 percent users are using android phones so in india especially in india 95 users are using android devices so remaining five percent of 3.2 percent belongs to apple users and remaining other like blackberry and uh by lawyers and microsoft users microsoft lumia nokia devices okay so this is the importance of this subject why because the graph is gradually growing initially in 2014 it was some presently now in india there are 1.1 billion users are there using smartphones so 1.1 billion users are using the mobile devices out of 1.1 billion users 700 700 million users are connected to internet means they are using smartphones out of 700 million users 95 percent users are based on android that's the importance of this subject why you need to learn this subject so forget it okay so i know only one programming language so just what's the importance of this subject so if you know this subject so you can survive anywhere in your in the industry why because this subject is having a huge scope though just analyze this market out of one 1.4 1.45 billion population 1.1 billion use population is using smart phones so out of those 1.1 billion 700 million phones are connected to the internet means they are using smartphones so out of 700 million 95 users are android based that's the importance of this subject that's why i conveyed thanks to the person who has framed this subject as an open elective so coming to this subject firstly i'm going to provide a brief overview on android application development why because as i mentioned earlier as i mentioned earlier so android application development so your subject completely confines towards the android application development using java so we can develop the android application in two ways one is by using java programming language other one is by using kotlin programming language as per the syllabus present so we have to use java in android studio the tool that we are going to use is android studio so firstly i'm going to brief the basic building blocks basic building blocks so of android so we have three basic building blocks in android so first one is activities first one is activities second one is intents third one is services so if you learn these three features if you learn if you are done with this basic building blocks of android you are done with your whole syllabus you are done with the whole syllabus of google associate android developer certification so i will take one by one so what is this basic building blocks we what is this activities intents and services so firstly basic building announcements so this all three together we will will make the mobile application using android there should be activities there should be intents there should be services these three put together will frame a mobile application what is this activities are so activity is nothing but a blank white sheet like this okay so it's an empty activity it's a blank white paper whatever you want you can design here i need a button i will place it i need a text to indicate my name i will place it whatever you want you can design in this blank paper such thing is called as an activity such thing is called activity so i if you are if you know about the web application so for example there might be 500 web pages 500 web pages together we call it as a website if you consider our video website there might be around thousand web pages together we call it as meet your website we do dot ac dot in similarly there might be n number of activities n number of activities together we call it as a single mobile application so please remember one thing one activity means it's nothing but a blank white sheet blank white sheet so where whatever the feature whatever the attribute whatever the widget that you want like button text box or whatever you want you are going to place inside that activity okay so such activities n number of activities together we call it as a single mobile application similarly how 500 web pages together we call it as a website so five consider 500 websites just assume 500 web pages are there in v2 website 500 web pages together we call it as a single website similarly n number of activities there might be 100 activities together we call it as a whatsapp application so if you just if you check your whatsapp application just you can uh check the scroll bar just in the navigation pane itself you can find the three option one is chart other one is message other one is status so chart itself is a separate activity status itself is a separate activity chart itself is a separate activity call itself is a separate activity just by clicking on the chat it will open the message related thing just by clicking on the status it will open the status just clicking on the call it will open the call means so you are transiting between the three activities like that android activities together call it as a single application there is no constraint that there might be any activities itself to make a single application you want a single activity we can we can call it as a single application but to serve the purpose we need more than one activity together we call it as a single mobile application just make sure that what is activity is nothing but a blank sheet blank white page where we are going to design our requirements so coming to this intent coming to this intense intents are nothing but user intentions user intentions what is that user intentions means user intentions so user intentions means just i don't know how many of you are watching this video or the users of facebook or instagram so in this facebook you will come across some news articles so if you click on that news articles it will ask the help of google chrome or opera mini browser to open that article that means so you are present in facebook application from the facebook application to complete that action you need another application by name google chrome so such kind of intentions or code as an user intentions there are two types of user intentions one is explicit other one is implicit these are the two types of intents which are present in android one is explicit other one is implicit what is this x plus it means what is this implicit means simple explicit means so if the communication is happening within the application if the communication is happening within your mobile app such intentions are called explicit intentions for example this is my whatsapp application where i have three tabs there are three steps one is chart other one is status other one is call so if i click on this call it will open the call related things which are present in your account that means you are not accessing the other application you are transiting from one activity to the this is my main activity this is my main page right this is what you're going to get when you open the whatsapp with three options chat status call so if i click on call it will open the activity the corresponding to call similarly if i click on status it will open the activity related to status means just absorb so there will be a back button if you click on this back button it will come back to the home page or main page main activity so here what i'm doing here i'm transiting between the two activities which are present inside the whatsapp application inside which application inside the whatsapp application this kind of transition is called as an explicit transition or explicit user intentions where the transition is going to happen within the application itself so what is the explicit between the two applications between the two applications for example consider your so your you have chat so i am the user i have sent one link v2 dot ac dot in so you will you will click on this message so if you click on this message your whatsapp doesn't have that feature to open its own browser so it will ask it will open a pop-up indicating whether you need to open it with google chrome other whether you need to open with opera mini so you if i select google chrome it will open the v2 website vtu dot ac dot in just observe your this is my whatsapp application from the whatsapp from the whatsapp application i am opening my google chrome this kind of intentions are called explicit intense make it simple explicit means if the transition is happening within the application means with whatever the application the time i am having i'm not transiting between the two application i'm transiting within my app for example in whatsapp how you're going to transit between the chat status and call options so implicit intents means so if you try to open a url it will ask the help of browser so it will be opened using the browser means your whatsapp application is making use of browser to complete the task such kind of intents are called implicit intents this is the second building block that we are going to use in our android application development or the term mobile application development so coming to the last building block that is nothing but services so please remember one thing with respect to services we have lot of already available services which is present in android studio just the thing is you must know how to use them you are not going to design something new just for example i need to create a database the sqlite service is already available we have sqlite just the thing is you must know how to use that sqlite in your mobile application development for example i need to create alarm application we have already have alarm service in this android studio just the thing is you must know how to use that alarm service so to create alarm application so for example i am going to use i am going to create a music player we already have a music applications which are running which are already present in the android studio just the thing is you must know how to make use of this kind of services okay that can be used in your mobile apps so this three put together will make any mobile application make it simple the syllabus is simple just the thing is what is activity whenever you're going to create a project whenever you're going to create application so it will open a blank page where you're going to design your requirements that's what we call activity so one activity will not make the mobile application n activities together we call it as a single mobile application what is intense it's nothing but user intention for example i am present in chat of whatsapp i need to go to status this kind of intentions are called explicit intents where you are going to transit within the application within the application implicit intents so for example if my friend has sent a url i will click on that url so it will ask to browser to complete the task such if that transition is happening between the application such intents are called implicit intents so next services the basic services which are required for any application development is already available in android studio just the thing is you must know how to use them that's it so whatever for example i need to create a text to speech application so which is already available text speech service is already available just you must know how to use that service what are the prerequisites what are the programming constructs that you need to use okay the function is already available just the thing is you must learn how to use them so before we start with the development make sure that so the basic requirements for using for developing android applications you must have a system with i5 r i7 configuration the device should be the device so to run the android studio the device requirement is you must have a mission with i5r i7 or greater along with that minimum 8gb ram minimum 8gb ram these are the device requirements to run android studio or to develop the mobile application so if you try with i3 processor devices with 4gb ram it's highly impossible to develop any android application the minimum requirement the minimum this is not the maximum one the minimum requirement means you must have a device with i5 plus or i5 or above processor with 8gb ram capability then only you can execute the android studio code or then only you can develop the mobile applications using the android studio the framework throughout our syllabus the framework that we are going to use is android studio and the language that we are going to use is java so the concepts that we are going to cover throughout our syllabuses activities intents and services so first two modules deals with the activities and intents so the remaining three modules deals with the services where you're going to learn how to create a database how to retrieve the data how to show share how to save the shared preferences how to publish an application how to develop an alarm like such things so you're going to learn in the remaining three modules this is the overview of the subject mobile application development with the subject code 18 cs 651 one as i mentioned earlier there are five modules present in your syllabus the subject name is mobile application development with subject code 18cs651 so coming to the module number one so you have five contents five topics that i am covering in this module are which are all the prices which are present in your syllabus the first is so introduction to what is android you are going to learn what is android what is versions why you need versions and what is android architecture that things you're going to learn in introduction to android followed by you're going to develop the first application you're going to build the first mobile application with hands-on experience next layout what is layout what is view what is the resources such things you are going to learn here how to make use of available layouts we have a wide variety of layouts which are readily available for the design purpose followed by event handling so for example i have added a button to my design so if i do some actions how that event will be handled how the actions will be recognized such things are discussed in this event handling followed by activities what's the life cycle of activity when the activity starts when the activity resumes when the activity is dead such things you're going to learn here followed by intents as i mentioned earlier in intense you are going to learn about two types of intense one as explicit other one is implicit finally so how to test our debug the mobile application this is the overview of the syllabus that is present in module number one starting with the what is android you're going to develop a simple application finally you're going to con we are going to conclude this particular module one with testing and debugging so coming to this android what is that android means why 90 percent of indians are using android mobile phones not the ios or other why in word out of 100 71 percent users are using android why because the android is an open source so even if you want to develop an application you can develop by using android studio and you can execute that application without any hurdles you don't need any high-end configuration systems or you don't want or you want to you don't want to purchase any license why because it's an open source so it it will be based on the linux kernel what is that linux kernel means so please remember one thing we have three flavors of operating systems we have three flavors of operating system one is linux kernel based that is nothing but open source linux kernel based isn't it open source one other one is windows third one is apple or ios we have three flavors of operating systems linux based windows based and ios based where the linux base is an open source that makes that's the added advantage or that makes this android studio famous so what is this android who invented this android so the android so initially the android was developed by andy rubin and team so there are four people's four members who worked on this android and developed this android studio our android application and you might be shocked why they have developed this so they have developed this for dg cameras digital cameras but it gained popularity when it was used in smartphones in year 2005 so this android is overtaken by google so from then onwards it's a product that comes under google corporation okay so that makes it's an open source that makes that's the great advantage of this android so user inter generally this android will be used in touch screens and smart devices so over 80 percent of smartphones all over the world makes use of this android operating system so please remember one thing android is not a name of mobile device android is a name of operating system which is based on the linux kernel okay so we have three flavors of operating system such as windows linux and ios out of those three flavors linux is an open source one so that will be used in the android okay initially it was developed by andy rubin and team in 2005 it was overtaken by google so from then onwards till 2022 it's a product android is the application our android studio is a product that comes under google corporation so that the applications which are developed for this android will cover watchers tvs cars so we have around 2 million android apps in google play store that shows the importance of this subject mobile application development it's not a theoretical subject it's a practical subject so where you are going to learn how to develop the mobile application the two the one framework which is which is the number one framework why because around 90 percent 95 percent of indian users are using that framework the name is android so over 2 million android applications are available in google play store this this shows the importance of this subject and highly customized devices and windows so please remember one thing the applications which are developed in android which can be easily customized there is no constraints such as for example if you want to develop an application for ios so you have to develop the application in apple device itself it's not possible to develop the application in some other device and deploy it to apple okay so such constraints are the restrictions which are not present in android devices as i mentioned earlier the main advantage why it has gained the popularity because of it is a open source one so coming to this android studio as i mentioned earlier what is android android is just an operating system what is this android studio it's nothing but it's nothing but a framework so throughout our syllabus throughout the five modules the framework that we are going to use is android studio what is this android studio it's the official android ide official android framework where by using this official android framework you can develop the android applications okay so what are the features that are provided in this android studio why it is uh it should be used for mobile application development for android os why because you can develop the application by using this android studio you can run the application you can debug and you can test and you can package the apps so these are the features which are available in this official android id and please remember one thing so just note my words so even you can develop the android application by using some platforms such as thunkable mit app inventor please remember that so where you are that's not a core android application so such applications will be developed by school students it will not serve the purpose you cannot customize such applications to develop application which can be customized you have to make use of android studio as i mentioned earlier it supports two programming languages such as java and kotlin along with the android studio please remember so in android studio there is no need if you want to see the output for example if you are executing a c program if you are executing a java so where you are going to see the output in the console similarly if you want to see the output of the application that you have developed so it will provide a feature by name virtual devices you can create create your virtual mobile device there itself and you can see the output there itself that's the advantage that's the main feature of android studio that is it provides the virtual devices you can create a virtual phone in that framework and you can observe the output there itself and you can visualize the layout for example i need to design something so the design visualization will be present here so the design layout will be presented as a feature these are the features of the framework that we are going to use on our throw out syllabus the framework that we are going to use is android studio that is an official id of android that comes under google the language that we are going to use is java so coming to the architecture so it's an important part android platform architecture what is this android platform architecture so please observe your where we have five layers five layers first layer is application layer first layer is application layer it's nothing but the applications will run in this layer for example just i will take a scenario if you consider whatsapp that comes under this first layer it's an application whatsapp is an application so there are two types of applications one is system application other one is user application whatever you are going to use whatever you are using whatsapp facebook chat or other applications such applications will come under user application system applications means for example settings have you installed anything to for settings to change the settings in your device no it's a system application for every individual phone there will be a settings that's a system application okay such kind of applications will be running on the first layer that's why we call that layer as application layer first layer is application layer where you will be having two types of application one is system application other one is user application user application means wide variety of applications you have that may be game that may be video player that may be music player that may be whatsapp facebook chat whatever that comes under user application system application mess which we which which we we have not installed which generally comes when you purchase the device such as such applications such as security manager power management settings such things are system application that's about the first layer system and user apps or you can call it as application layer so next layer number two java api framework as i mentioned earlier there are a lot of services lot of services which are readily available in the android studio that you must know how to use so your system applications will make use of those services will make use of those services such as notification manager alarm manager music player such services will be available in this java apa framework so your applications will make use of those services to complete the task so application framework layer is the layer which provides the support for the applications which are present in the application layer so it has been written using java programming language that's why we have using the term java api framework application programming interface framework so next we have the third layer where native libraries and android runtime so i don't know how many of you watching this video know about java to run the java code we will make use of java virtual machine that is nothing but jvm similarly to execute the android application to execute the mobile application we will make use of dalvik virtual machine dvm so that will be present here that support will be present for every individual application that you are going to develop the java android runtime will be provided it's nothing but dalvik virtual machine so similar to the jvm that we use in our java so native library supports will be there native library disappointments the of device drivers for example to work to work with the wi-fi connectivity have you installed anything no there should be a device driver should be installed in your device to have the connection with your wi-fi to connect to to make use of bluetooth there will be a bluetooth device device so to make use of a browser there should be webkit device driver so to make use of graphics there will be opengl such kind of drivers such kind of libraries will be returned using c and c plus plus that comes in the third layer along with the runtime runtime means it's nothing but dvm dalvik virtual machine so that's about the third layer first layer is about application second layer is about the support to the application such as various managers third layer is about the various libraries are the device drivers along with the android runtime it's nothing but dalvik course machine so next hardware abstraction layer what is this hardware abstraction layer so if you consider your device if you consider a mobile where we have camera where we have bluetooth where we have gps where we have ram where we have memory uh how those hardware parts will be utilized by your application by using this hardware abstraction layer how the ram usage will be happened in your mobile apps by using this hardware abstraction layer how your camera turns on when you click on the camera application by this hardware abstraction layer so this hardware abstraction layer is nothing but an interface between the hardware devices hardware components which are present in your mobile along with the application for example in my whatsapp i will click on camera icon it will turn on camera how based on this hardware obstruction layer camera itself is a separating component that is present in your mobile so whatsapp is application so whatsapp is present in top layer camera is is a physical component that is present in your device how it will be embedded how they are connected by using this hardware abstraction layer so finally linux kernel so this is the hard part of this four layers so what is going to do with this linux kernel it is going to perform various management such as performance management power management security management so why that's why we call this as a art part of your mobile app so if you divide these five layers first layer deals with applications so application can be categorized into two categories system applications and user application so next java api framework it's nothing but the various features of the services how your application can use those services so next native c plus plus library and android runtime c plus plus library means it's nothing but the device drivers which are required to make use of the features that are available in my phone along with the android runtime we are going to make use of dvm it's nothing but dalvik virtual machine so hardware abstraction layer as i mentioned earlier there might be wide variety of hardware components there might be different sensors or different components which will be available in your mobile how those components can be used by using this hardware abstraction layer your application can use those hardware components so the linux kernel it will be the art part of your android application so it which will perform various management such as power management memory management security management so those things will be taken control by this linux kernel this is the art part of this architecture so architecture can be divided into five layers as mentioned in this diagram so coming to versions so presently we are using android 12 as of as on 2022 the version that we are going to that we are using is android 12 so as per the syllabus as per the contents that is present in your syllabus so so firstly we started with honeycomb the version is 3.0 which was released in the year february 2011 next ice cream sandwich in october 2011 jelly bean in 12 2012. likewise we have wide variety of versions uh starting from 3.0 till 9.0 which is present in your syllabus so now we are using 12.0 okay so which is nothing but android p android r okay so what is this version sir why the key those people will keep on updating android versions so why because so if you don't update your android version means your device your smartphone or your smartwatch will not be compatible with the new application that going to emerge that's why you must update why because what are the some there might be some drawbacks or some failures or some missing features may be available in marshmallow which will be overcome by using nugget likewise they will keep on updating the android versions and unless until that reaches the saturation as of now it has not reached the saturation till the present version that we are using is android 12 so this is the api level so the minimum api level that we should now use in our devices is 28 or 29 so the minimum api level is 28 that you must have in your device while developing any application so these are the various versions the version started with anikum ice cream sandwich jelly bean kitkat lollipop marshmallow nugget oreo and pre so the presently using version is android 12 so now last with respect to this introduction this is the last topic that is what are the challenges that we will come across while developing the android applications first one is i guess you have seen new mobile up mobile phones where it is somewhat like a laptop where you can fold some mobile devices the screen orientation is big some mobile devices are screen as a screen orientation is very less so we need to your application the application that you are going to develop should accommodate this multi-screen world for example it might be a folding uh device or it may be straight or it may be horizontal it may be vertical so you cannot state that my application will work only for the devices with horizontal orientation my application will work only for the devices with four centimeter height six centimeter width such constraints you cannot find you cannot mention so your application the application that you're going to develop should fix that multi-screen world different devices with different screen orientation will appear but your application should fit that's the first challenge that appears while developing the android app development so next one getting the performance means the memory usage the power usage such thing should be considered while developing an application okay so your application should perform just i guess if you double if you open if your battery performance preferences in your devices it will show how many various applications have used your battery how consumed your battery power so such thing that thing should be considered why because i am running an application which consumes my 50 percent of battery means who is going to install your android app no one is going to use similarly keeping the code and user secure so this is the main main attribute out of out of this file that is so if someone is downloading your application someone is using your android app means they should be secure why because nowadays we are doing a transaction over our mobile phones using various uh uh applications such as phone pay google pay amazon pay okay so if the data or the transaction details are the details which are present in our mobile phone or the contact details or the multimedia details are fetched by my application means that will be a threat so please remember one thing the users the viewers who are we watching this video kindly download any mobile application for example if you are using android applications means android phones kindly download only the applications which are available in google play store so only for such application the security checks are being done for remaining application don't don't download or don't install any application directly in the form of apk file so that may help your device as well as that may get the data that is present in your device finally it should be compatible for example i am developing an application for nowaday advanced android 12 but it should be compatible with the previous version marshmallow or kitkat lollipop so you should you should not ignore the previous versions even you have to consider the previous version and you have to update the features to be compatible with the present version that's also one challenge whatever the application that you are going to develop should be compatible with the world users so finally understanding the market and the users as i mentioned earlier present the global market for mobile application is wonderful guys so 95 percent indians are using the smartphones okay so especially 95 smartphones with android operating system so this subject this subject will have a huge weightage and will be will be a great asset why because 95 percent users who are using smartphones are android based means just imagine how many applications will have all how many jobs will be created so that's the market of android applications presently in india with respect to world concerns 71 percent users are android based thank you [Music]"
    },
    {
        "video_id": "7wMb9CHyOoc",
        "title": "Topic 1 Introduction to Mobile Application Development Part 1",
        "url": "https://www.youtube.com/watch?v=7wMb9CHyOoc",
        "duration": 899,
        "transcript": "hello welcome today we'll start with the first chapter introduction to mobile applications development and Android we will cover the introduction to mobile including devices and application development we'll get to know a little bit about the history and evolution of mobile and also brief introduction to Android mobility is defined to be having the capability of being able to move or to be moved easily it is very important to get things moved easily therefore in order to get things move easily there are certain properties to mobile devices and these are what causing mobile application development to be slightly different compared to traditional applications writing on desktop based systems mobile devices are started to be commercialized in 1983 and this is how a mobile device look like back then it's very expensive heavy and very basic it only allows you to make calls and receive calls but as time continues to progress we see more interesting aspect added into the phones including text messages we have music and then we have simple applications today we are going into a smartphone era where mobile applications become more and more important and is easier for us to actually obtain various types of applications to get various types of job done besides that is also possible to actually have various type of mobile devices they're not just a phone this includes tablets music players cameras watches and of a wide variety of possible devices that can be programmed to be small light and portable generally there are some characteristic to mobility first is portability the most important aspect is that one can easily carry the device and bring it all around the place therefore the size and the weight of the device is usually small this is very important because it will affect the actual characteristics of the devices and also giving challenges to the developers in terms of writing applications that can work on such small devices besides that usability is also very important the mobile device should be usable by different type of people in different type of environments they should not be restricted to be used at only a certain location or certain setting but it can be useful all over the place they can be affected by use of characteristics environmental critics and device for a statistics functionality is also very important for the mobile devices mobile applications can provide functions so that they are such functionalities running on the mobile devices that the user can use it to get certain job done these mobile applications can be standalone and could also dependent on other systems or other users connectability is a very important part that makes mobile devices great the capability to connect to a different device distance away is very important there are three modes of connectivity one that allows connection to the back-end system all the time one that will connect to the back-end system intermittently throughout the period duration and one that never connects to use the back-end system therefore can be working totally offline and our mobile devices have certain features in general first for the processor is definitely going to be slower compared to any desktop devices that is actually being launched in the same time the main reason is to conserve battery power because of the size of the battery due to portability the processor cannot be too fast because it will be two batteries and some the battery consuming and therefore would not last long therefore processor speed is usually controlled to be lower than the average PCs or desktops in the past the processor speed can be extremely small but now most of the process has been a lot more decent and allowing a lot of tasks to be conducted in a much more normal manner and a more acceptable speed next is the operating system the operating systems in mobile devices are different compared to the standard operating systems that we use in desktop systems they are specifically designed to be used on mobile devices popular operating system in mobile includes Android iOS Windows Mobile which are the three players the display is also small because of the size of the device and some cheaper phones and cheaper mobile devices can have less powerful displays the memory size is also small it can go down to a few hundred kilobytes for some very basic devices up to a few gigabytes but generally not as good as what we get in desktops where we have a much higher maximum ram that we can add in the input is also made more challenged because of the size due to the smaller size we do not have a sophisticated keyboard or mouse and etc some of the devices may be designed to have a small keyboard that is physically attached to the device but due to the device size the keyboard is very small however this is not popular nowadays and most of them resort to using on-screen keypads cell phones smartphones that we have nowadays are generally using touchscreen as their input and therefore most of this typing are done using these small on-screen keyboard that is made available on the touchscreen some will use handwriting recognition system to help assist writing more complicated characters such as Chinese Korean Japanese Hindi and other scripts that are a little bit more difficult to type voice input were also more popular compared to desktop applications to help assist in easier input mobile devices generally have a mean to connect to different type of networks and there are a few ways of connection including Wi-Fi 3G 4G and etc according to devices for extensibility of mobile devices they can be designed to have additional memory files modems cameras GPS however it depends on the mobile device itself during design phase and after that is quite difficult to custom-made an actual device according to users need so most of these are pre-designed but it is free for the manufacturers to control what to be added into a device during the design phase the price can be highly variable depending on the specifications of these device so it can be very cheap and very basic to very expensive phones with very good features and also very good specifications for the wireless networks it first started to be developed by Bell Labs advanced mobile phone services were designed back then but today most of us are using the global system for mobile communication gsm for our basic basic services that are provided by the service providers for receiving calls and also to make calls the basic way to connect to internet on mobile devices is to use the GPRS general packet radio service this is highly available throughout most regions and even in certain areas they are very rural or even in forested areas although signals could be unstable in very remote areas this is a very slow connection but at least a basic one that allows us to connect to internet when there are no better technology why then wipe and CDMA provides us 3G technology and these definitely increases the data transmission rate and is widely available in most major cities and larger towns today and this is one of the most important basic technology for us to connect an Internet in most urban and suburban areas there are some other wireless technologies and 4G technology is one of the most important technology that we are looking at today for basic mobile networking that we are using in a lot of larger cities this is a comparison of roughly where are the speed limits of the different technology 4G including LTE can actually theoretically go up to 1 Gbps there are different types of fields in mobile that we can actually try to classify a lot of these are duplicated with one another and overlapping so the first term that we often hear is mobile computing mobile computing allows us to have devices being programmed to be functioning and they are allowed to be move around so most of other phones that we are seeing today can be considered as a mobile computing device it allows actions to be done that are actually computed and you can use it in different locations as you bring the device along we also see anywhere anytime information this is the idea that allows us to get information wherever we go and with the basic connection that we have nowadays it is possible for us to obtain these thought of information as long as we are connected to the Internet the virtual home environment allows us to experience network that is similar to a home network a whole network usually have fixed IP so when we are moving around as we move our connection may be connected to different mobile mobile services tower and we did not experience the shift of this kind of connection and we will feel that we are always connected to a same connection and this is the most important part of mobile devices that allows us to experience such a kind of it network experience that is similar to where we are at a home or office environment and other type of fields and some of the important ones that we are seeing includes pervasive computing pervasive computing is getting important because we are seeing more and more technology going to be more pervasive in a way such as they are appearing in our cars it can appear in our clothing it can appear in some chairs tables and different common objects around us when this kind of pervasive computer"
    },
    {
        "video_id": "FjrKMcnKahY",
        "title": "Android App Development Tutorial for Beginners - Your First App",
        "url": "https://www.youtube.com/watch?v=FjrKMcnKahY",
        "duration": 3320,
        "transcript": "In this beginner's course, you will learn how \nto create an Android app from Rahul Pandey.   Rahul is an Android engineer at Facebook \nand a lecture at Stanford University,   we're going to build an Android app from the very \nbeginning, we'll start with an empty project and   end with something you can actually use, and even \npublish to the Play Store, we're gonna build a tip   calculator, where you can enter in a base amount, \ntip percentage, and the app will calculate the tip   and total amount for you. We're going to build \nthis app using the kotlin programming language.   So I'm going to assume you have some background \nin programming. But if you're new to kotlin,   I'll leave a link in the description to a quick \n12 minute primer about the language I made.   I'm Rahho, I've been teaching Android on \nYouTube and off YouTube for a while now.   So when you're ready, let's get \ninto it and build this app together.   There are three things I want to cover in this \nvideo. Number one, I want to walk through the main   features of the tip calculator application. Number \ntwo, I will explain the core Android concepts   we'll cover while building it. And third, because \nI'm keeping the app deliberately, very simple, I   also want to call out some of the Android concepts \nthat we won't encounter about building it.   And those will be covered in more sophisticated \nor complicated Android apps later on. I mentioned   earlier how you could actually go ahead and \npublish this app on the Google Play Store as   soon as he finished, finished the tutorial. And \nthat's exactly what I did. So if you want to try   out what we're going to build, then feel free to \ncheck out the link in the description and download   on one of your Android devices. So let's do a \ndemo of the app so we can get a sense of the main   features that we're going to build. So in this \nexample, I went out for a very lavish solo dinner,   and I spent $83.15. And I'm leaving a pretty \ngenerous tip of 24% and the apple automatically   compute the tip and total amount. So just to \nmake the math a little bit easier, why don't we   update the base amount to be $100. And what you \ncan see is, the keyboard that comes up only allows   us to input numbers and decimals, which makes \nsense because we're dealing with currencies here.   And if I'm feeling really happy with the service \nI received at the meal, I could increase the tip   percentage and bring it to the maximum amount \nto 30%. And two things happen here. One is that   we dynamically update the tip and total amount \ncomputations at 30. And the sum is 130. But also,   we update the description of that tip percentage. \nSo went from great to amazing and also became this   brighter green color. On the other hand, if I \nwas really unhappy with the service, I might tip   zero. And we consider that a poor tip. And you can \nsee how the color got updated to this red color.   And then at the bottom here in the footer, we also \nhave a way to personalize the app so you can say   who you who made it or where you're from.   The concepts we cover in the tip calculator \nare the same concepts that are fundamental   to every Android app. First is creating the UI. \nEvery app needs a user interface. And the core   component we'll leverage here is a constraint \nlayout, which will contain the other widgets,   for example, the TextView, or the \nseekpart, enter in the tip percentage.   Second, every interesting Android app is \ngoing to listen and react to user input.   So we have two ways of inputting data in our \napp, one is entering in the base amount. And   second is a tip percentage. And based on that we \nneed to react and update the UI appropriately.   And third, we will barely scratched the surface \nof styling and animation on Android, I'll show you   how to update some of the colors and also show you \nhow to do an animation with the tip description   and change its color dynamically. There's also \na lot that we're not going to cover in the tip   calculator. And that's important in order to \nreduce scope and make this app really quick   and simple. To build. If you're new to Android, \nfirst, we're not going to have multiple screens.   Which means that we don't have to deal with things \nlike navigation or the back stack in Android.   And in fact, the single screen that we do have \nis actually quite simple, because we don't have   any kind of list data that we need to manage. \nSecond, we have nothing to do with networking   in the internet. As soon as you start talking \nto an API or server, things become quite a bit   more complicated because you have to deal with \nasynchronous programming and managing that data.   And third, we're also not dealing at all \nwith storage, everything it will be local   and in memory. So we're not going to write to \na database or to disk or to the cloud anywhere.   And all three of these make the app much simpler \nto build. So I'm sure when you build this and you   walk into a restaurant, you're going to be super \npopular because you'll be able to compute the tip   dough easily and literally Your name will be on \nthe app. So I will see you in the next video.   In this video, we're going to start with the brand \nnew enter studio project and layout the views For   our tip calculator, in particular, we're going to \nlay out eight views where the four text views from   the left will describe the contents of what is \nbeing shown on the right. The first thing we'll   do is create a brand new enter studio project. So \nI have in our studio running here, and I'm running   arctic fox, but any recent version should do tap \non new project. And I'm going to pick the empty   activity template. These other ones are useful \nsometimes, but they bring in a lot of cruft into   our application, which could be confusing. So \nusually, I'll just go with empty activity. Let's   call our application Tippie. The package name, \nusually what I'll do is I'll take my domain name   or my email address and flip it backwards. So I'll \nleave that as is and then pick a location, make   sure you have kotlin, select this language. And \nI'm going to pick minimum SDK version of API 21.   Now I'll tap on finish. And the very first thing \nI like to do whenever I have a brand new project   is simply try and run the starter code. \nBecause if we can't even run the starter code,   then something's already gone wrong. Let's make \nsure that we're at a known good place before   we start writing any code. When we create a new \nproject in our studio will take some time to set   everything up. To run our application, we can \ngo to the drop down in the menu and choose to   deploy our app either to an emulator or a physical \ndevice. So I'm going to choose pixel two API 29,   which is an emulator I created from before, hit \nthat green triangle to boot up our emulator if it   doesn't already exist, and then build and deploy \nour project to this emulator. And you'll see the   status at the bottom of Android Studio to see the \ncurrent progress. This might take a minute or two.   But when it's done, the app will get \nautomatically sent to the device and   brought to the foreground. So all we need to do \nis wait until we see some action on the emulator.   Okay, great. This looks promising. We are seeing \nan application called to be so open emulator with   the text of hello world, which is a default for \nan empty project. And this gives us confidence   that we are able to successfully run the basic \nproject. Let's come into inner studio and spend   a quick minute talking about the starter files. \nAnd actually, it's quite simple because there are   only two files that we're going to be concerned \nwith main activity dot kotlin and activity   main dot XML, you can think of an activity in \nAndroid terminology as representing one screen.   So with the project that we have, right now, we \nonly have one screen. And that's referred to as   the main activity or the main screen. And that's \nthe business logic that we're defining right here   in this file called main activity. In \nparticular, the starter code gives us   one function or one method that is already being \noverridden. And that's called onCreate, to the   Android system will automatically invoke or call \nthis function when our application is starting up   when it's creating our screen. And the important \nline here is line nine setcontentview r dot layout   activity main. So R stands for resources. So what \nwe're saying here is that the content or the UI of   our screen should be the layout file in resources, \ndefined at activity main dot XML. And indeed,   if we jump to the definition of this, we can \nsee that goes directly to activity main dot XML.   So I'm going to minimize the project tool window \nover here to give a give ourselves more room.   And that's also minimize the attributes pane. \nSo here's exactly what we're seeing in the   application, just a blank canvas with HelloWorld. \nAnd in particular, if you look at the component   tree over here, it might be minimized for you. \nBut you can expand it by tapping over here,   we can see the parent element is something called \na constraint layout. And it has exactly one child   called a TextView, or a label. And that has \nan attribute which has value hello world. And   that's how we're seeing the Hello World text \nin our running application. In this video,   we're going to spend all our time in activity main \ndot XML, because we're only concerned right now   with constructing the UI for our application. \nAnd in particular, here's how we want to end   we're gonna have eight components in the screen. \nOn the left, we have four different text views,   you can think of a text, you'd like a label, \nwhich isn't editable by the user. On the right,   we have the actual components being described by \nthe TextView. So we have an edit text at the top,   which allows the user to enter in a bill amount, \nwe have a seek bar, which allows the user to   enter in a tip percentage, and then two more texts \nuse at the bottom for the tip and total amount.   There's one more thing I want to call out before \nwe start constructing our layout, which is that   there are multiple perspectives of our UI, what \nwe're looking at by default is a design preview,   which is what will actually show up on your \nemulator or device. But you can also drop down   into the code tab, which is the actual underlying \nXML. So you can see how we have the constraint   layout and then one child view the text view \nsame as design. Split means you look at both. And   most of our time is going to be spent looking at \ndesign preview. And what we can do is go into the   palette and drag and drop different components \nlike a text view or edit text that we want. And   again, that will be represented in the code tab. \nSo just keep that in mind that there is a one to   one correspondence between whatever changes you \nmake in the design preview and the underlying XML.   So for now, let's go back to design, delete \nwhatever components we have, so we have   single constraint layout with no children. \nThe documentation describes constraint layout   as a way to create large and complex \nlayouts with the flat view hierarchy.   We're able to describe the relationship \nbetween sibling views and parent layouts   through a set of constraints that we define. \nAnd that allows the inner system to gracefully   layout our UI across phones or tablets of \nmultiple sizes. And the important thing   here is no nested view groups. On Android, if \nyou have a very deeply nested view hierarchy,   that leads to a lot of performance degradation \nand something that we call jank, or UI lag.   And so the constraint layout allows us to create \ncomplex views without having nested view groups.   Coming back to the tip calculator project, we're \ngoing to lay out all eight views on screen here   in a single parent constraint layout, there will \nbe no nested view groups, which is as good as   we can get there, no relative layout or linear \nlayouts inside of our parent constraint layout.   So even if you've never worked with the \nconstraint layout before, take a moment   right now to think about how might you position \nthe views on screen here relative to one another,   such that we can describe it in a flat \nview hierarchy. Back in Android Studio,   the first thing we'll do is drag out a TextView \nrepresenting the top left component of our screen,   which is the TextView representing the base \ntable. The first thing I do whenever I drag   out any component is update the ID to be something \nmore meaningful. So I'll call this TV base label   and then update the text to be base. \nAnd what you'll notice here is that   Android Studio is complaining that \nthis TextView is missing constraints.   So it only has designed time positions, it'll \njump to position 00, which is the top left of the   screen at runtime unless we add constraints. And \nthis is the whole point of the constraint layout,   we have to constrain every component vertically \nand horizontally. So vertically, what we'll do   is drag this top anchor point of the TV based \nlabel and drag it to the top of the screen.   And then in the attributes tab, we will specify \nthe margin of how far away we want it from the   top of the screen, and I'm going to say 48 on the \ntop. Similarly, we want to specify a left margin,   so we'll drag the left anchor point and drag \nit to the parent and specify this to be 32 dP   away from the left end of the screen. So now you \ncan see the error went away, we're going to do   the same process now for the other three texts \nuse on the left side of the screen. Starting with   the one right below the base label is a TV tip \npercent label. Author the text here to be 24%.   The TextView below that will be the TV tip label.   The text will be tip. And then \nfinally we'll have the TV total label.   And the text here will be total.   So we have the same issue where we have \nto constrain all of these horizontally and   vertically, vertically, what we'll do is take the \ntop anchor point for each TextView and drag it to   the component above it. And we'll specify a margin \nof 32 dP which means that each text you should   live 32 pixels at 32 dP below the text you \nabove it, that will drag the top anchor point   and drag it to the bottom anchor point of the \ntext above it. And again, do the same thing 32 dP   constrain each of these views vertically. Now how \nabout horizontally, if we go back to the desired   end state, what you'll notice is that if we draw \na vertical line here, all of the components on the   left side, they will all be aligned to the right \nend of that top text you this TV base table. That   is how we want to constrain them horizontally. \nAnd we could actually do this in the Design tab,   you could say align and then align the right \nedges. But I'd like to show you how to do this   in the code tab. So if I open up the code tab, \nlike we talked about, every change you make in the   Design tab has a corresponding change in the code \ntab. So right now we have four textures and that's   exactly what we can see here we have 1234, like we \ntalked about, there's right now an error in that   we are not constraining these horizontally. \nThat's why we have this red underline.   The vertical constraint is what you can see here. \nSo what we're communicating with this line is at   the top of the TV tip percent label should be \nexactly equal to the bottom of the TV basic what   is a TextView above it, along with a margin of 32 \ndP which means you want it to be 32 pixels below   the component above it. So similarly, what we want \nto do is specify that the end of this component,   the TV tip percent label should be equal to the \nend of the TV based label. And we want this to   be applied to each of the components on the \nleft side So with that, you can see how that   error went away. And if we go back to the Design \ntab, you can see how everything is now aligned.   One more thing I want to call out here is that the \ntools namespace is only used for the purpose of   rendering the design preview. Because we have now \nfully constrained each of these views horizontally   and vertically, we don't actually need this \nanymore. So I'm going to select each of these   and delete it. And one more thing is I'm \npretty big on having a consistent style   and ordering of the different attribute \nnames. So for example, here we have the   ending angle bracket on the same line or new line. \nAnd to fix that automatically for us, I can tap   double shift, and then just search for re format. \nAnd there's a shortcut for re formatting the code.   If I do that, then you can see how Android Studio \nhelped us to fix it up across the whole file,   which I like a lot more. Right, so let's go back \ninto the Design tab. And before we move on to   the component on the right side of the screen, one \nthing I want to do just a few quick design tweaks.   First, I want to make the text a little bit bigger \nhere. So I'm going to make the text appearance   medium, you can see how that made it bigger. And \nthen this TV tip present label is a bit unique,   because it's representing the value of what to \npresent the user actually chose. So to indicate   that it's a little bit different from the \nothers, I'm going to make the text bold here.   Cool, I like that. Now let's think \nabout the four components on the   right end of the screen. This one is going to \nbe edit text, the below that we have seekbar.   And then below that we have two text \nviews. So let's drag out a edit text.   And the one we'll drag is the one which says a \nnumber of decimal. And the difference between   all these different edit text is actually quite \nsimple. It's simply the input type. Because we're   dealing with the currency, we want numbers and \ndecimals in ours. Below this, we are going to have   a seek bar. And then below that, \nwe're going to drag out to TextView.   Alright, let's update the IDS here to be something \nmore sensible. So this is going to be called   at base amount. Next we have the \nseekbar tip. Then we have TV tip amount.   And then finally we have the TV total amount.   Let's update the text here to be 103 dot \n11. And this one, I think we said 1996.   Let's do some design tweaks before we position \nthese elements. So these bottom textures,   these is the most important part of the whole \napp. So I'm going to make the text large.   The seekbar, I'm going to specify a hard coded \nwidth of 200 dP to make it a little bit wider.   And then also there's an attribute here called \nMax, which is the maximum amount that seekbar   will hold. And that'll be 30. Because we only \nallow up to 30%. For the edit text, I'm going to   set the EMAS to be eight, which means how many \ncharacters wide how many characters wide will   this edit text be and eight is sufficient for us, \nI'm going to increase the text size to be 24 SP.   And then finally, I'm going to add a hint here \nor a placeholder, which is the bill amount to the   user knows what this edit text is for. Now let's \nthink about how to position these. So vertically,   the bottom two texts, you should be aligned \nvertically, so I'm going to select both of them   and then align the vertical centers. \nAnd similarly for the ones above those.   And then similarly for the \ntip percent and the seekbar.   And you can see how in the Design tab, \nwe're actually able to see this nice   preview of the constraints which are added.   For the bill amount. Let's think about how \nto constrain it horizontally, it'll be 32 dP   away from the corresponding text you on the left \nside. And horizontally, all the other components   on the right side, these bottom three should \nbe aligned to the left end of the bill amount   edittext, there must select all of them, and \nI'm going to specify the left edges should all   be aligned. That looks good. The only thing \nwe have to do now is if we hover over here,   we are missing a vertical constraint on the edit \ntext. So to do that, I'm going to go into the   code tab. Here's the edit text at base amount. And \nthe way we'll communicate the vertical positioning   is by considering the top of this element to the \ntop of the top left view which is a TV base table   and similarly The bottom of this view should \nalso be the bottom of the TV base table. So   it'll be right in the middle vertically. So \nif you go back to the Design tab, you can see   that now the errors have gone away. And you can \nsee visually what these constraints look like.   If you go back to the Design tab, again, \nwe don't need this tools namespace anymore,   because we are fully constraining everything. \nLet's reformat the code really fast.   And then one more thing I \nwant to do is, even though   this is not needed, for the purposes of running \nthe program, just for the sake of developer   information, I'd like to label these with a \ncomment. These are the views on the left side.   And then after for TextView, starting with the \nedit text, these are the views on the right side.   That's right to see what this looks like.   Okay, awesome. Like we expect this is \npretty much exactly mirroring what we   see in the design preview. The only thing \nthat I want to fix up here or improve is   that it's a little bit weird that we already \nhave values for the tip and total amount,   even though the user hasn't actually entered \nanything. And that's exactly what the purpose   of the tools namespace is that we talked \nabout earlier. So what I'll do is select the   corresponding text view. And rather than \nhaving a text here, I'm going to scroll down.   I'm going to move this over into the wrench \ntext area. And that's the tools namespace.   So I'm going to move these over into the tools \ntext. And then finally, the same thing over here.   Just to show you what that did, \nif we go back to the code tab,   if you look at the TV tip percent label now \ninstead of having the Android text attribute   is now the tools text attribute. If we run the \napp one last time, let's see the impact this has   on the initial layout. Awesome, this looks pretty \ngood. Hopefully this video gave you a good sense   of the power of the constraint layout. One thing \nI can show you just to demonstrate what we've done   is that with these eight views on screen, they're \nall located instead of a single parent. And if I   drag out that top left TextView everything moves \naccording to that, which is a really nice way of   relatively constraining all the views to \neach other. So the job in the next video is   actually to hook up the business logic in the main \nactivity, so we can react to the input and compute   the tip in total. See you in the next video. In \nthe last video, we laid out the eight views on   screen for our tip calculator application. In \nthis video, we want to add the business logic   to actually make our app interactive, we'd like \nto be able to do is when the user scrubs on the   seat bar, we want to update the tip percent label. \nAnd when they enter in a base amount, then we want   to take that value and then compute the tip in \ntotal amount. In particular, you'll notice that   there is no Submit button. So as soon as the \nuser changes the base amount or the tip percent,   we want to dynamically compute the tip and \ntotal amount when anything changes. So as a   first exercise, what I want to be able to do is as \nsoon as the user changes the value on a seekbar,   I want to be able to update the percent label. So \nin order to do the first thing we'll do is getting   a reference to the views in the screen that we \nactually need to be able to read data from or   modify. And there are actually five different \nwidgets on screen that we care about the tip   percent label and then all for the components on \nthe right side of the screen. So in in our studio,   the way we'll do this is declare a bunch of \nvariables up here for each of the components.   So for example, we have the edit text, that'll be \nat base amount. And the type of this is going to   be a type edit text. But don't worry too much \nabout the syntax here. If it's confusing, all   we're saying is a private variable. It's a late \ninitialization because we're going to initialize   it inside of the onCreate method and not in the \nconstructor, which is why it's late initialization   is a variable and that we're calling it at base \nmount the convention I follow that the name of   the variable is exactly equal to the name of the \nID. So now in the onCreate. After the set content   view, we are going to say at base mount find \nview by ID et base amount. And we're going to   repeat this now for the other four components \non the screen. So we have a seekbar tip.   And that type here is seekbar. And then we have TV \ntip percent. That's going to be text to you. And   then we have two more texts for us. One is TV \ntip amount, and the other is TV total amount.   Now I'll just pull out references \nto all these inside of onCreate   And finally we have the total amount. So going \nback to our objective, the first thing you want   to do is when the user scrubs on the seat bar, we \nwant to be notified of changes of that user input,   and then update the TV tip percent label \nto indicate that. So actually, let me   update the name of the variable here \njust be TV 2% label for consistency.   And the way we get notified of changes on \nthe seat bar is by adding a listener on it,   it'll say seek bar tip dot set on seek \nbar change listener. And now we need to   tell the entertainer what should happen when the \nseat bar has changed. And the syntax here is we're   going to say object, seek bar.on, seekbar, change \nlistener. And then we're going to define this   class inside here. And enter today will help us \nimplement this, you'll have this red underline   under object to tap on that red light bulb and tap \non implement members. There are three methods that   we have to override in order to comply with the \ndefinition of this on seekbar, change listener.   And NRC will help us with that. And don't worry \ntoo much. Again, the syntax is confusing. The   details here are that we are defining an anonymous \nclass which implements this interface. So if I go   to the definition here, you can see that this \nis a public interface, which has those three   methods exactly that we have overridden. And now \nit's our job to tell the system what should be   happening when each of these methods are called. \nAnd actually, we don't really care about on start   tracking touch or on stop tracking touch. So I'm \ngoing to remove the two dues here, and let's leave   it empty implementation. Before we update the UI, \nlet's first add a log statement in Android to more   easily figure out what's going on. So I'll right \nlogged on i and this is a method that takes in two   parameters. The first one is a string, which I'll \ncall tack, I'll define later. And the second one   is also a string, which is a message or a log \nstatement. And I'll say on progress changed,   which is a method name, along with the progress, \nwhich is a current value of the seekbar.   So let's define this tag, I'm going to go up to \nthe top of the class and define a private const   Val tag. And the convention here is that whenever \nyou have any kind of logging, the tag is typically   going to be the class name. Alright, let's try it. \nSo the idea here is that every time the progress   has changed on the seat bar, which means the user \nis scrubbing, we will print out the current value   shown in logcat, which is where the logs output \nit. So open up logcat. Open up the emulator. And   the logs that we care about are the ones \nfrom only our application, which is calm,   calm, rk Pandey Tippi and we also only \ncare about info level logs because that   is what log.io represents info level \nlogs. We also only care about logs,   which have this particular tag, which is main \nactivity. So let's add main activity as a filter.   And here as we change the seat bar, you can \nsee how we get one line of logcat output,   and it represents exactly what is the current \nindicator of the seat bar showing. So if we go   all the way up to the maximum, we see 30 as we \nexpect, and if we come all the way back down,   we go to zero. So now let's update the UI. And in \nparticular, we want to update the TV tip percent   label to indicate the current progress of the \nseekbar. So we'll say TV 2%, label the text   attribute of that, we will set that equal to the \nprogress. But actually, we want the progress to   be represented as a string, not an int. And also \nwe want to concatenate a percent sign after it.   So we'll say dollar sign progress, which is \nhow we do string interpolation in kotlin.   Similar that we did in a log statement, and then \nadd a percent sign at the end. Let's try it.   So as we scrub on the seekbar, you can see how the \nTV tip percent label does get updated in lockstep   with the current progress of the seekbar, which \nis great. One improvement here though, is that   initially, we are not indicating any tip percent \nin the label. And so to fix that, let's define   one more constant, which we'll call initial tip \npresent. So we'll have a private const Val initial   tip present, and we'll set that equal to 15. So \ninitially, the default tip is going to be 15%.   So with that diviner the constant before \nwe do anything in the listener, great in   the onCreate method, will they seek bar tip dot \nprogress is equal to initial tip percent. And we   also want to update the label appropriately. \nSo we'll say TV tip percent label dot text   is equal to initial tip percent, with the percent \nsign after. Now when we run the app, we should   see instead of the blank 2% label, we should see \n15% like we do and the progress bar indicator is   exactly in the middle of the width of the whole \nseat bar. Next, similar to how we are able to   react to changes in the seat bar, we also want \nto be able to react to changes In the edit text,   so there's a analogous method on the ET base \nmount we'll call add text change listener.   And the syntax is similar, we pass in an \nobject here, which is an anonymous class   is an implementation of the text watcher.   And we'll have Enter to help us once \nagain, there are some methods that we   have to override. So I'm going to tap on that \nred light bulb and implement the members three,   override all them. And then similar to before, \nthe only thing that we care about is after   text change, I'm going to go ahead and delete the \nbody of implementation here. Just to get a better   understanding of what's happening here. Again, \nlet's add a log statement after text changed.   dollar sign ups. Alright, let's try it. So \ndollar sign s is the parameter passed in. And   that is actually what the user is typing at that \nmoment. Run this, let's open up logcat once again.   Alright, so like before, if I modify the seek bar, \nyou can see that it is changing appropriately. And   then if I add the value into the edit text, you \ncan see 800 it is being updated appropriately   in log. Two quick notes. First, I sometimes see \nstudents will get tripped up when they invoke   functions in kotlin. The MSG that you're \nseeing when we call log into it is a hint   from energy about what that parameter represents. \nSo if you actually type MSG, that will lead to   a compile error. So let's make sure you don't do \nthis. Second, I want to demystify what the object   keyword means. So the object expressions like \nwe're using twice so far, are examples of how   to create anonymous classes, which are one time \nuse classes that are commonly used to implement   interfaces. So we have both text watcher and on \nseekbar change listener as interfaces defined by   the Android system. And these methods that we're \noverriding will automatically be invoked for us   when the user takes the appropriate action on the \nunderlying edit text or seekbar. So now we have   all the ingredients in place to actually make this \napp functional. Whenever the Edit Text changes,   I'm going to call a method called compute, tip, \nand total. And this is actually what will take the   values from the edit text and seekbar and then \nupdate the tip and total amount appropriately.   So this method doesn't exist yet. But again, \nlet's leverage the utility of Android Studio   and have to create this function for us inside \nof main activity. And there are a couple things   that have to happen in this method. First, we \nwant to get the value of the basic tip present.   Second, we'd like to compute the tip in total. \nAnd third, we need to update the UI to show   those values. So to get the value of the basic \ntip, that's pretty straightforward, we just   look at the edit text at base amount, grab the \ntext, and then call to string on it. And then   on a string, we know it's going to be a currency \nlike a decimal, so we'll call to double on it,   in order to turn it into a number that we can \nwork with. And we'll call this base amount.   And then similarly, for the 2%, we want to get \nthe value of the progress on the seat bar, this   attribute called progress, and that'll be saved \nin a variable that I'm going to call tip percent.   Quite Next, we want to compute the tip and \ntotal amount. So the tip amount is going to be   the base amount, times the tip percent divided \nby 100. So for example, if the base amount is   $100, I went for $100 meal, and the tip percent \nis 20, then I expect the tip amount to be $20.   So that'd be 20 divided by 100 is 20% times 100. \nAnd that gives me $20. So that'll be tip amount.   And then we have the total amount, and the total \namount is simply going to be the base amount,   plus the tip amount. Okay, finally, we need \nto update the UI. And again, this turns out   to be pretty straightforward, because we have a \nreference to the two text views which show the   tip and total amount, which is TV tip amount, \nand we're going to set the text attribute there   to be tip amount. And this is going to throw an \nerror because tip amount is a number it's a double   right, but we actually require something called \na car sequence. And to give it a car sequence,   we can just call to string on this. And then \nsimilarly, we call we need to say TV total amount   is that the text attribute here to be the total \namount to string. And this should be a plus sign.   Wait, this is the whole brain of \nour application. So if we run this,   then what we're doing is anytime that the edit \ntext value has changed, we're going to call this   method and we should be updating the UI To have \nthe correct amount for the tip and total amount,   right, so we have 15%. For the tip, if I add in \n$100 here, then you do see immediately we get the   correct tip and total computation. And we would \nlike to have the same logic get executed if I   change the seat bar, the 2%. And that turns out \nto be really easy, because we've abstracted all   the logic away into this method. So I'm going \nto call compute tip and total, right here in on   progress changed. Alright, so if you try this \nnow, we should have a pretty functional app.   So similar to before, if I put in 100. Here, \nwe do correctly compute 115. And if I change   the percent, you can see it does appropriately \nupdated. Alright, so this is working actually   pretty well. But there are two things that I \nthink are incorrect or could be improved. But   just take a moment right now think about what are \ntwo improvements that you could do to the app that   we have right now try playing around with it, see \nif you can identify any issues. Okay, so the first   improvement that we can make is actually a bug. \nSo notice what will happen now if I Backspace   on the base amount, so that there's nothing there, \nso you can see the app actually crashed. So if we   look at logcat, let's take a look at what actually \nwas the error. So I'm going to scroll up to the   very top of the stack trace. And you can see \nhere we have a number format exception. This   is the important part, there's an empty string. \nAnd and the stack trace tells us exactly where the   issue happened is a main activity line 58. And \nso the issue that's happening is that when the   edit text has an empty value, then it doesn't make \nsense to try and convert an empty string into a   double. The very first thing we shouldn't be doing \nhere is actually checking if at base amount done   dot txt, if that is empty, then \nwe need to do an earlier turn.   Additionally, we should be clearing out the values \nof the TV tip and total amount. Because if the   edit text is empty, that means there's nothing to \ntap on. And we should be showing nothing for those   two textures, then we call return, so that none \nof the rest of the function will get executed.   The second improvement we'll make is about \nformatting the output of the tip and total amount.   So it's not that noticeable when we \nenter in 100 for the base amount.   But if we add in 100.9, then you can see the \ntotal amount becomes very long and unwieldy.   Because we're dealing with currency, we should \nreally be mandating that there are exactly two   decimal points in both a tip and total amount. \nAnd the way we'll do that is right here, instead   of just calling to string, we want to format \nthe string before we put it into the TextView.   So the way we do that is by using this format \nmethod. So we define the format like this   percent.to F, which means we only want two numbers \nafter after the decimal point dot format. And we   pass in the tip amount. And then similarly for \nthe total amount, a percent dot two f format.   Let's try it. For hopefully now, in this \nscenario, we should actually end up with 116.04   instead of this very long decimal that had \nhappened 100 right away, you can see instead   of only having one decimal point now we have \ntwo. And the true test is when I type in 100.9.   Now, the display of this is way better, we \nhave 116.04 rather than that huge decimal which   becomes unreadable. So at this point, we have a \nvery functional app, what we've done is gotten   references to the relevant views on layout, and \nthen added listeners to the seekbar into the Edit   Text because there's no Submit button. Anytime \nthere's any change in the seekbar or the edit   text, we are dynamically computing the tip and \ntotal amount and updating the views appropriately   in this compute tip a total amount. So in the \nnext video, what I want to show you is some   style improvements along with a way to personalize \nit and add a really cool animation. So I'll see   you in the next one. At this point, we're done \nwith the implementation of our tip calculator.   In this video, our goal is to add some color \nanimation and personalization into the app.   So we'll start off with the footer at the bottom. \nA lot of apps or websites have this where it says   you know made with love in California or made with \nlove by this person. So we're gonna start off by   adding a text at the bottom of the screen. So \nlet's go into enter studio, open up the activity   main dot XML and scroll down to the bottom \nand we're going to drag out one TextView here.   Let's give it an ID of TV footer. \nAnd then the text will be made   with love by raw and of course you can personalize \nhowever you want to constrain it. We're going to   have this horizontally be in the center of \nthe screen. So we're gonna add a left and   right Straight to make it centered, and then we're \ngonna make it 32 dP from the bottom of the screen.   I also want to add a couple different style tweaks \nhere. First is all caps, I want to make everything   here capitalized. And I want to change the \nfont to be sans serif, condensed, slight.   And then finally, I want to make this a \nlittle bit larger text, appearance, medium   weight. And finally, I want to change the love \nword with the emoji. And you can either add   this to your keyboard, or another way to \ndo this is if you Google for heart emoji,   then the first result that comes up, gives me \nan option here to copy and paste the emoji.   paste that in. And it looks a little bit weird in \nthe preview, but it does show up properly when you   render it in the design. And if we check it out in \nthe app. Awesome, that looks pretty good. The next   thing I like to do is a bit the color scheme. So \nwe move away from these default status bar color   color primary in this background white. So let \nme explain where these colors are coming from.   There's one very important file that \nmust exist in every single Android app.   And that's called the Android manifest file. So \nif we open that up, then this file describes all   the different components of your application, \nthe permissions, for example, if your app needs   internet permission, and much more. And the \nimportant line for us is right here on line 11,   where we're describing the theme of our \napplication, and this is a file that   automatically gets created for us when we \ncreate the empty project. So I'm going to   jump to the definition here. And you'll see \nyou have two different files here, one for   normal theme and one for the night theme. \nAnd the one that we're currently looking at   is normal, I'm gonna open that up. And this \nis where we're getting the colors for the   default application that we have. So in order to \nupdate the colors, we're going to have to define   new colors and then replace them here, we can \ntake a look at where this file lives by hitting   this option, select Open File, and we can see that \nit lives inside of resources, values, and themes   directory. And the colors are also defined inside \nof colors XML in the values directory. And each   of the colors is defined as a hexadecimal value, \npurple, 500, and so on. So our job is let's figure   out what colors we want, and then add them here. \nAnd then we'll reference them inside of the themes   XML file. So in order to figure out what colors \nyou want, there's a couple different options,   I'll show you what I typically do if you go to \ncolor.adobe.com. There's this really nice tool   where you figure out what kind of color scheme you \nwant. So there's a couple different options here,   you can pick the color harmony rule, analogous \nmonochrome chromatic triad, and so on. Once you're   happy with something, then you can scroll \ndown and grab the hexadecimal values here.   So I did this exercise already. And here are \nthe colors I came up with, I'm going to have   one which is called primary blue, darker blue and \nbackground blue. So let's go ahead into the colors   XML and define these for the first one is going \nto be called primary blue now has this value.   The next one is background blue, \nor the next one's a darker blue.   And then finally, we have background blue.   So now in themes XML, I updated the color primary \nto be primary blue. And then I updated the primary   variant to be darker blue, and that's gonna be \nthe color of the status bar. And then finally,   in order to have a background color on the whole \napp, I'm going to add one more attribute here,   which is called background color, Android color \nbackground. And that is going to be the background   blue that we have. Let's try it. Awesome, that \nlooks great. So we're getting very close now,   to the desired end state, we have the \nfooter, and we have the customized color.   The last thing I want to talk about is this \nanimation on the tip description. And here's   actually what this looks like. As the user \nis scrubbing, we will dynamically update   the color of that word that's used to describe \nthe current tip percentage, and it'll go from   Red if it's a very bad tip to a really bright \ngreen if it's really good tip. Not only that, but   we're also going to be changing that word or that \nadjective used to describe the tip percentage. So   it gives the user some really nice interactive \nfeedback about what kind of tip they're leaving.   Alright, so the first thing we'll do is just \nadded text you need the seek bar and increase the   vertical distance between these two texts. So \nclose out these other editor windows because   we don't need to look at them again. In activity \nmain. What we'll do is first increase the distance   between the 24% which is the 2% label and the TV \ntip label. Let's increase the margin here to be 56   Next, let's drag out one more text you. \nAnd we'll call this TV tip description.   And then the text should be empty, because \nthat will depend on the initial tip percent,   which is set programmatically. But to get a \nbetter sense of what this might look like,   we are going to use a tools \nnamespace and to say acceptable here.   That looks good. And now we need to position \nthis horizontally and vertically. So vertically,   it's going to be right below the seek bar   tip bar, and we'll add a margin here of maybe \neight dp. And then we want these two to be   horizontally aligned. So horizontal centers, \ngreat. And you can see how it added the left   and right constraints. So it'll be right in the \nmiddle. And you can see the error also went away.   So now back in MainActivity, we need to get a \nreference to that TextView. So let's say the ID   here was TV tip description. So when I say TV \ntip description, get a reference to it here.   And every time the C part is changed, that \nis where we have the potential now, to update   the language on that text, you want to have one \nmore method here called update tip description.   And let's have Enter to help us to create \nthis because this method doesn't exist yet.   And one thing we'll do actually is as a parameter \ninto the update tips, description method,   I'd like to pass in the progress and progress. \nAnd again, energy video can now help us to add   this as a parameter into the function that \nwe have defined. The tap that red light bulb,   and have Enter to help us to add the parameter \nand all I did here is added a parameter.   And instead of calling it progress, I'm going \nto call it tip percent. And it's I've typed in.   So now the idea is that based on the value of \ntip percent, we'd like to be able to say TV tip   description dot txt, and we'd like to be able to \nset it to be something like good. And of course,   this good will change based on the value. \nAnd the construct in kotlin. To be able to   decide a value of something based on \na set of conditionals is called when   which is similar to a switch in Java. \nSo I'm going to save our tip description   is equal to when and then depending on the \nvalue of 2% will take certain action. So   if tip description, if 10% is between zero \nand nine, then the string should be poor.   If it's between 10 and 14, we'll call \nit acceptable 15 and 19, it'll be good.   And when it's between 20 and 24. It'll be great. \nAnd there should be one extra period in here.   And finally, anything else meaning that the \nvalue is above 24 then we will say amazing.   And so now instead of using good here, we will say \ntip description. And finally before we test this   out one more thing I want to do is at the very \nbeginning, when we are setting up our screen,   which is you know in the onCreate method, as soon \nas we get all the references to each of the views,   we also would like to call that method update \ntip description right here with the initial tip   percent just so that language is always going \nto be in sync with what we start out with.   Let's try it. So now hopefully we should see a \ntext you right underneath the seekbar and the text   on in that text you should change according to \nwhat we have selected through the seekbar. Okay,   this looks promising already because initially the \n2% is 15, which means we fall into this branch of   the wine statement and that means that the value \nshould be good. That's good. And then if we bring   it down to zero, we get poor and if we go all the \nway up, we should get amazing which we do. One   quick thing want to do is back in activity main. \nI want to set the font weight of this to be bold.   The textile should be bold to make \nit stand out a little bit more.   Finally, the last thing I want to show is this \ninteractive color animation where if the user   picks a very good tip we show bright green and if \nthe user picks a bad dip, then we show a red color   indicating something went wrong. Coming back into \nAndroid Studio in minute tivity kotlin update tip   description is where we're going to add the logic \nfor updating the color based on the tip percent.   The question is how do we dynamically compute a \ncolor based Based on an integer, the way we'll   do this is through a concept called interpolation, \nwhich is actually a fancy word for something which   is conceptually quite simple. If I tell you I'm \nrunning 100 miles, and I'm 75% of the way done,   then you would tell me that I'm roughly at the \n75 mile mark. And what you're doing in your   head is linear interpolation, you're assuming \nI'm going at a constant speed starting at zero   ending at 100. Therefore, I'm at 75 miles, the \nsame thing is exactly applying here. Every color   can be represented as integer. So if I'm tipping \n20%, then we're two thirds of the way between   the very worst color and the very best color, \nwhich are two integers. And all we need to do is   some simple math in order to compute what exactly \nthat color value is, for the tip description. The   first thing we'll do is define the color for the \nworst invest tip. So open up colors, XML, and   let's add in color words tip color, best tip and I \npicked a red and green color like we talked about,   we're going to paste these values in for color \nworse and color best. So we have these defined.   And now our job is simply to do some math \nat zero, we should show worst tip at 30,   we should show the best tip and everything else is \nsome value in between. and this turns out to be so   common that Android actually has something \ncalled a RGB evaluator to help with this,   where we represent colors as integer \nvalues. A stands for alpha, RGB is red,   green, blue, and it will help compute the color \nfor us. So coming back into main activity,   we're going to define a color. And that will \nbe coming from argb evaluator dot evaluate.   And then this takes in three parameters. One is \nthe fraction of where are we on this progress   bar between zero and 32nd is a start value, which \nis the very worst color and the end value is the   best color. So the fraction is simply going to be \nthe tip percent, which is the perimeter pass 10   divided by the maximum amount of tip which is \n30. And that's going to be seapark tip dot max.   Next, we need to get the very worst color. And the \nway we'll do that is context compat dot get color   pass in this which is referring to the context \nand then the actual color that we just defined   in the colors XML, which is color first. And \nthen finally, we're going to provide the best   color here. One issue you'll notice is that \nthere's a type mismatch, we require a float,   but we found integer. So by default, because \nboth the numerator and denominator are integers,   we're gonna do some sort of truncation, which \nwe don't want. So the way to handle this is to   cast one of the numerator or denominator to a \nfloat value. And that will resolve that. So now   we have this color, all we need to do is set the \ncolor on the tip description text, set text color,   with the color. And finally before before we try \nthis, we need to cast the result of the evaluate   function call to be an integer, because we know \nthe values we're computing between are integers,   so the color should be an int. And now we should \nbe able to compile and run this just fine.   So two things should happen \nnow. One is we should bold the   text. And second, there should be a color applied \nimmediately. And based on what present we pick,   it should adapt as well. Right, this looks good. \nSo initially, we have a color right in between   the green and red. And if I go all the way down to \nzero, you can see how it changes to red. And if I   scrub upward to the best tip, which is 30, you \ncan see how it slowly transforms from red to   green. I like that a lot just because it feels \nmuch more interactive and dynamic now compared   to what we had before. Alright, so let's give \nit one last try. We're going to put in $9 here   for the bill. And then as I scrub, you can see how \neverything updates appropriately. If I Backspace,   there's no crash, I can enter in another amount. \nAnd everything works just as we expect. Awesome.   So if this is your first ever entered app, \nthat's amazing. Congratulations. Let me know   in a comment. The reason I really liked the tip \ncalculator, there's so many ways you can extend   this basic project that we have to make it more \ninteresting. So a couple ideas I had number one,   you could split the bill by n people. So you \ncould imagine that you go out to dinner with the   number of people you add in three or four \nand then you should divide that total amount   by three or four in order to make it easy \nfor everyone to pay a certain amount.   Second, you could add a button or some sort of \ncomponent which allows the user to round the final   amount up or down. So there's no need to deal with \nchange. And of course, there's a lot more that you   could do in terms of design or color updates. So \nwhat I recommend now is complete any number of   extensions, other ones that we talked about, or \nsomething that you came up with on your own, and   then you can more or less publish exactly what you \nhave on the Play Store. I won't walk through that   here, but I'll leave a video in the description \nwhere I talk about how to do that and I hope that   you use This tip calculator as a starting point \nin your journey as an Android developer and you   build many more apps in the future. If you \nenjoyed this, please drop a like and comment.   We'd love to hear from you. Thanks so much for \nwatching and I will see you in the next one. Bye"
    },
    {
        "video_id": "MnZsMJWpjis",
        "title": "MVC vs MVP vs MVVM vs VIPER  || iOS Architectures || Swift",
        "url": "https://www.youtube.com/watch?v=MnZsMJWpjis",
        "duration": 1887,
        "transcript": "[Music] hi all welcome back welcome to app coders today we will going to learn different architectures used in the iOS applications what exactly software architecture is software architecture is the process of converting software characteristic into the structure solution that fulfill your business needs and Technical requirements like this is one of the important decision that you need to take during the initial phase of the application development where your classes are going to sit what structure you are going to follow like where is your view model where are your models where are your controllers how they communicate between each other and where is your network layer sit so these type of decision that we need to take during the initial phase of the application this is like the foundation of your project like you have the foundation of the building so this is the foundation of your project there are different architectures available in the market and used in the iOS application development like MVC MVP mvvm Viper Etc so what are the benefits of the good architecture like it help us to establish the clean language to understand where in each kind of responsibility within your feature like uh you are developing an application within a team and so like if someone joins new to the team so it help us it helps them to understand so what architecture what classes have you have used in your application make your project maintainable for long run yeah it help us to maintain the project for the long run easy to test decrease coupling between classes and components as the classes and components are completely separated out so it help us in the testability as well so separate UI from the business rules it is easy to scale and easy to identify problems within the code like if you placed everything in a single file or in a single place then it is difficult to debug the code or it is it is difficult to fix or it there might be a chances it might cause regressions like if you are going to change something then it regress somewhere else so these are the benefits of the good architecture like the and we need to follow uh the good architecture in the applications now we are going to learn the different types of architectures in the iOS application so the first we have is the MVC so MVC stands for model view and the controller so model you can think of it as a data layer so it provides you the structure of the data like just an example if you have a user in your application then user has a first name last name email and phone number so this is what a model provides to you you can Define model in iOS either with a struct or either with the classes even you can Define functions within the model so V stands for view as the name implies view is what implies what actually the user see on the screen like when you run your application and whatever C uh on your you have on your screen is the view like you have the buttons you have the text field or either you have the list or the table view so this is what the view is whatever the user see on the screen so the C stands for the controller so as the name implies it helps in controlling the things within your application so like this act as a middleman between the view and the model and helps to establish the connection between them so just take an example like you are on a login screen and a user has entered username and password so like user has entered the username and password so it view notifies to the controller so controller listen to the username and the password which is entered by the user like as it involves the data as well like username and password so it updates the model like controller has received the username and a password so like it model updates the data and notifies the controller again and then after successful login then might be controller is uh going to make an API call like then when we receive the response from the server the login successful then controller notifies The View again then login successful and move to the next screen so this is how the flow of the and we see work so now we are going to see this complete flow in action with a demo project so this is the demo project that I have created for demoing the MVC just ignore this name demo mvvm because I'm I'm going to use the same project for the mbvm as well but inside this I have used the MVC architecture so this project is uh going to fetch all the currencies and we are displaying all the currencies in the form of a list and when you click on any of the currency you are moving to the details screen it is just showing you the the amount and the currency symbol here so uh like you can see the project structure uh here uh like here is my app which has app delegate and scene delegate here we have the common in the common whatever is the common things that we need to place we are capping here we are keeping here and in the modules uh we have the DI dependency injection container which is responsible for uh injecting uh you know and providing the controllers to us and uh the next is the currency and in the currency we have a list and a detail as the MVC stands for model view and controller so here we have the folder for the controller model and View and in the service folder is responsible for making an APA call and connecting with the network layer so the service is making a call to the network layer and once the data received it giving git gives us back the data to the controller so in the controller folder like we have currency view controller and in the currency view controller here we have the outlet for the table view this is the data source object and data source is nothing but this generic data source class that we have created so in the data source class uh we have written the data source and the delegate method for the table view like we have made it a generic so we can pass any any data type here so here we have written all the data source method for the table view like number of rows and the cell for row at index path and did selector at index path so these are the method so this is the data source object and a service class we are using the service class for making an API call and fetching the data from the server and here we have the viewed it load in the view did load we are doing some initial actions or the operations and we are making the API call here the fetch currency and uh here we are we are assigning the delegate and the data source for our table view as well so um okay so this is the Delegate for the data source and this is the Delegate for the table View and next we are making the API call for the fetch currency so and with the service object we have made an EPA call here and once we receive the success so we are uh updating our data source like we we receive the data from the server and a Reload we are reloading our table here as well and in case of the error we are displaying the alert the controller and this we have we have created an extension of this class and whenever the cell click so we are navigating to our detail page from here and passing our rate object to the detail screen to display the data and next we have the model uh you can see the model here is responsible for just holding the structure of the data and here we have the currency which is again a struct that we have used in our application and in the view we have the cell so like in the cell we have created the outlet the currency rate where we are displaying our data and the currency label where we are displaying the currency name we are passing currency rate model to the cell class cell is the view for us now here the storyboard and the cell both are view for us so in the controller class uh we have seen controller is responsible for making the service API call and for loading the data through the data source so we can see here with the fetch currencies method we are making the API call loading passing the data to the to our data source class and reloading the table View and even we are handling the actions that we have if there is any buttons or the text field uh on the on The View then controller is also handling all the actions button actions displaying the alert and even making the new uh you know routing to the new screen so these are all a complete responsibilities for the controller class here so now uh move next to our slide so these are some of the Hidden complexities for the MVC so like might be you have here the joke MVC stands for the massive view controller instead of the model view controller like our view controller is getting messy because it has a lot of responsibilities uh like uh because somewhere we need to keep our logic and the business logic and so we need to find some place so because in the model model is just responsible for the data structure and view is just for the user interactions or whatever the user see on the screen so where we kept our our business logic and the other stuff so we have only the controller for us at this place so there is no separation of concerns like as we are mixing up all the like business logic user interaction all the things like that we need to do within the controller even the API service call so we are we are there is no clear separation of concerns within the MVC so it is difficult to test the modules like if everything is at a single place so obviously it is difficult to test as as well and maintainability so it is difficult to maintain like if you in the future if you have seen some of the bugs if some of the bugs comes to you to fix so it would be difficult like in the larger project like in the demo we have seen just a smaller project but in the actual bigger project you will going to see 1000 lines of code so it will be difficult for you to find out the exact line where you need to do the changes or it might cause a regression as well apart from this there are other hidden complexities as well like in the diagram we have one view One controller and one model but when you actually working in the application you will have the multiple mvcs and you need to coordinate between them as well so uh like the first thing uh is the vertical information flow however it is clearly not stated anywhere but somewhere we have the vertical information flow between the model and the controller and sometimes the model is storing the reference of the controller as well so next uh like MVC was introduced in 2011 when we were working on The Objective C and in Objective C the structures concept was not introduced like the value types was not introduced only the object reference live was there so model were used to share between the controllers so we are sharing the state of the controllers or the sharing the data within the controller so we are which is going through the controllers so the view controller communication was also become tedious and like whenever the problem was there whenever you are going to change in the model at a one place so it is going to reflect at the other places in the application so these are all the complexities for the MVC so to overcome those complexities so uh we have the other architectures in place so firstly let's see how the MVC is different from MVP MVP stands for model view presentation so model and view are same the thing only change is the instead of controller here we have the presenter so in MVP presentation class is used to update the data we need to present to the user so the presenter class is introduced so to just modify the data or to some manipulate the data so we can display to the user on the screen in MVC has a strong reference to the view as we have seen in controller class so controller has a strong reference to the view so this is uh this is a problem like and in MVP View and presenter might have strong references and might be communicate through abstraction in MVP also there is a means disadvantage like View and presenter might have strong references and even uh you know presenter can communicate to the view through abstraction layer like we can use protocols and uh to communicate between the view and the presenter but also yeah this is not a good good thing and here we have a strong reference as well in MVP in MVP View and model are Loosely coupled yeah this is the advantage like MVP in MVP View and the model are not closely coupled because there is a one layer between the view and the business logic part in both architecture uh where to keep the business logic is still a question yeah so in MVP and like we have seen uh in the MVC we are keeping the business logic mostly in our controller classes and where and even we are we are using some sometimes the model class to keep our logic and here in MVP so there is no specific Place defined to keep the business logic because the presentation is only used for presenting the data or manipulating the data but still the way to keep the business logic is still the question so now here comes the next architecture which is the mvvm so which is introduced in 2014 by the Microsoft so here mvbm stands for model view and the view model in mvbm View and controller are considered as a one layer the responsibilities of the controller are distributed so now View and controller are almost dumped they don't have any such kind of responsibilities like we have in the MVC so now we we need to segregate the responsibilities somewhere right so here comes the view model so in view model we are putting all the business logic and the it is the intermediator now between the model and The View now here model is holding the data so now it is the responsibility of the view model take the user action from The View and update the model and after updation it viewmodel again respond notifies The View and view responded accordingly so or whatever all the API calls and the business logic now it's handle Care by The View model so the next uh we have the coordinator which is usually called mvvm plus C pattern so the coordinator is responsible for navigation or the routing kind of things so like between the controller there is a router and so router is responsible of providing the object and handling the navigation between the controllers and the view model like in the view model uh we are making the API calls so view model is connecting to the network manager now so the network manager is making the actual AP calls so after getting the response the response is a returned to the view model and then view model updates The View so this is the complete flow of the mvvm architecture so next uh we are going to see the demo application with the mvvm architecture so here is the same project that we have seen for the MVC and now uh in the modules in the currency list and in the currency detail so let's close this so you can see now we have view V model and then model instead of the MVC instead of the controller now here we have the view model folder now the controller goes into the view and the other view here we have the cell so view model uh here we have created The View model which is making the API call right now and whatever the business logic we need to put so we can put here in the view model the important thing about mvpm architecture is the view binding view binds to the view model either through boxing technique and so there is no inbuilt way of providing The Binding but like we can use RX Swift or we can use combine and now we have combined as well and like in Swift UI the observable object or the observables estate and observed object Concepts is coming in so which is working in the same pattern so here like view model is sending the event it doesn't care which view is receiving that event or which view is subscribing those events so which is the good part of the mvpm architecture so view model can be reused by any number of views so it doesn't matter who is receiving those events and next here we have the model so model is the same uh like this is the structure which is holding the data which is used for holding the data actually so and here we have the data source class so data source like is a responsible for loading the tables and all so this is the complete structure like whenever the view receives the event so view notifies to the view model view model is uh notifying or updating the model object like here we have we can see the currency rate and once the model get updated so it is updating to the data source here viewmodel is making the API call like once we get the response we are updating to the data source so data source eventually updates The View update actually updates the table view so whatever the user actually see on the screen so this is how the complete flow work uh in the mvvm so the next uh we have mvpm features like it is easier to develop easier to test as we are segregating the responsibilities uh between the view view model and the model so it is easier to test as well so like uh view model has that dependencies like view model is controlling the state and the behavior of the object so it is easier to test the view model independently as well so it is easier to maintain and there is a clear separation of concerns but with all the advantages we have some of the disadvantages of the mvvm so here now instead of the view controller now we can say view model gets massive so view model has all the responsibilities or almost most of the responsibilities the previously in MVC the controller has so the mvvm overkills when we have a simple user interface like we need to create our view classes we need to create our model classes and again the view model classes so for the simple project we need to create a lot of classes so it is difficult to debug the data binding as it is declarative like in the data binding so we like any view can subscribe to the event to the subscribe to the data so sometimes it is difficult to figure out which view is subscribing to the view model events so these are the main uh I can say disadvantages of the mvvm features so now to further improve it so the next we have the wiper architecture so the in the wiper so View and controller are again the same layer again the single layer and the now the view model is divided into the presenter and the interactor so the presenter is responsible for updating the data manipulating the data which view requires to display on the screen and the interactor is responsible for handling some low level things like the making the API call or handling some kind of a business logic so here the interactor comes in so the next we have the entity entity is nothing which is similar to the model so model is used for storing the data or we are creating the structs so in the same way the entity is same as the model and instead of uh previously we have the coordinator class in the mvvm but now here the same thing we have the router so the router is a responsible for the uh you know coordination between the controllers so the wiper stands for view interactor presenter entity and router so this makes the complete wiper flow and the like previously in mbvm we have the network manager view model is responsible for making the API call and interacting with the data manager so here again we have the interactor responsibility to make the API call uh further the API interactor is interacting with the network manager which we can say the data manager to make the API calls so once the data manager received the response it updates the interactor interactor further updates to the presenter and presenter manipulates the data and updates the data and give it to the view so view can present it to the user so the now here comes the Viper demo let me just show you the simple demo application for the Viper so you can you have a bit more understanding how actually the wiper looks in the projects I have download this a simple project from the internet and it is created by Anna's bugra so like what this project is doing actually these are all the results and uh we can search movies and we can search music apps books in this app so and this app has the collection view so this is this follows the Viper architecture so let me just show you the project structure so this project has managers so which has alert manager load manager network manager kind of thing and in the models so let's go to modules first module has uh detail and home so in the home screen we can see the project structure so here we have interactor presenter view entity router so these are the main components of the Viper architecture solar interactor let's check the interactor so interactor is mainly responsible for the low level things like the making the APA call and the interconnection between the presenter and the entity or or also yeah interact uh with the making the API call with the network manager uh kind of thing so here we can see we have the repository model and alert manager so these are the things uh which interactor has so interactor is making the call to the repository and uh for searching the items so once it get the response then uh here we are getting the response from the repository output here we implemented the repository protocol and we are getting once we get the response we are mapping the response otherwise uh we are making some uh default values uh within the response and returning here and next we have the presenter so presenter is interactor presenter is interacting between the interactor and The View so here we have the interactor object view object router object and a model object as well so here we are making the you know session begins in this session begin we are making the actual APA call with the interactor so here in the presenter uh we are making the search API call and whenever the user click on the item we need to perform some action we need to navigate to the detail page we will get this action from The View like uh we this home presenter is accepting this protocol so we are getting this action from The View and whenever we get the response from the interactor then we are updating our view as well so we are updating our view with the help of the protocol so let's check the view in this case here uh we have the view as a home controller so here we are accepting and implementing the delegate from the presenter and we are updating uh the response we are getting from the API and updating the UI so so the view has the presenter object and the data source object and it is responsible for the UI elements like the segment control collection view whatever we are able to see on the screen which is handled by the view all the user actions it is responsible for handling all the user actions and pass those user actions to the presenter and presenter will pass those actions to the interactor interactor will make the API call and again once the interrupter receives the response then it pass on to the presenter and presenter pass on to the view to get it displayed so here we have the Builder so here we are creating the objects and create we have created the home controller object and assign all the dependencies to the controller and again here we have the entity entity is nothing just a model for handling and storing the data and here we have the router which is responsible for the navigation and here we have the service so which is interacting with the network manager to make an APA call and get the data from the server so this is the entire structure for the Viper architecture so these are the features for the Viper architecture it is easier to test easier to maintain and we have created the one more level of separation of the view model but it has a sum of the disadvantages like uh it is the rigid and perspective like interactor has its own responsibility and presenter has its own responsibility so need to create uh too much of the protocols like for the communication between the interactor presenter view entity router so we need to create a lot of protocols for making the communication between them and like if you have a big project so you need to keep the knowledge of the complete flows so that would be a bit tedious like in the simple projects also like you if you follow the wiper architecture like in the simple projects you need to create the entire structure like you need to create interactor and you need to create presenters so there are a lot of classes which you need to create to maintain the consistency of throughout the project so these are some of the disadvantages for the wiper architecture so according to you which architecture is best so this is question for you like just think about it but in my perspective none of the architecture is best even though the architectures are good but still our main goal should be not to spec to stick to a specific architecture our main goal should be to scale up to achieve the scalability maintainability extendability and testability within the project so which can be achieved through any of the architecture like if you started with one of the architecture you can interconvert the architecture at a later stage although that would be a costlier and also time consuming for you but I can say your main goal should be to achieve the testability maintainability extendability of the project and it should be easy to maintain so which can be achieved through any of the architecture so guys that's it for the today's video hope you learn something new today if you like the video please like subscribe and comment on the on the channel so see you in the next video thank you"
    },
    {
        "video_id": "29WppyhWO5c",
        "title": "Clean Architecture iOS [MVC vs MVVM]",
        "url": "https://www.youtube.com/watch?v=29WppyhWO5c",
        "duration": 648,
        "transcript": "Want to know the differences between MVC and MVVM?\nWell stay tuned because in this tutorial I'm going to show you step by step inside a project how you can manage MVC\nor MVVM according to your needs. So Alex here from rebeloper.com.\nI want you to hit that SUBSCRIBE button, open up xcode and let's dive in.\nSo first thing you need to do is go ahead and check out the link in the description for the resources and you will find a link for this xcode project that I have previewed for you because we are going to dive deep into MCV versus MVVM and no bs,\nwe are going to go straight into it and yeah I'm just going to make this a\nreally short tutorial so you may understand what the differences are and yeah hopefully you will be able to use\nany of them when appropriate. So let me just take a look at\nthis project here. So it's a basic project I have removed the\nmain.storyboard and in the scene delegate we are just simply adding the rootviewcontroller MVC table viewcontroller in a UINavigationController.\nSo that is how it's all starting and yeah here we have MVC.\nBefore we go into MVC just a reminder that I do have a service so I just assume that you want to fetch some data\nfrom the internet, so this service is just completing with the success and with a model. Now as you can see \nhere we have our fetch MVC data and fetch MVVM data. What you have to know\nis both of them do the same thing and by the way the MVC model and the MVVM model are the same. So yeah just so you know\nthe model and fetching the data are the same. So we can get a kind of a comparison of how each architecture works. Now MVC Model View Controller.\nNow the main idea here is that the controller controls everything.\nIt controls the model and intern the model feeds \nsome data to the controller and the controller controls the view\nand also the view controls the controller in formulas\nof input and so on. So let's just take a look at here.\nSo MVC table view controller we have a really simple table view controller and what we\nhave here is one section and we have\na data which is an array of MVC models and yeah we have the number of rows set to data dot count and self row at\nindex path. We dequeue the reusable cell here with the identifier. Now this identifier is provided in the cell\nwhich I will move to in just a second and then we add\nour MVC model basically inside our cell from the data index path dot row.\nWhat else do we have here. We set the title. We register the cells and we fetch some data. Now we do that with the service dot fetch data, upon success we grab the data and reload the table view. Now let's take a look at our view. Basically our UITableViewCell. Here we have our identifier which I was\ntalking about. Just for convenience and yeah we have that dot completion \nand nothing too fancy, with set this to be of style to be of subtitle. Now when we do add our model\nwe are going to grab some things and set up our text label in the detailed text label. So just so we know what the model is about,\nwe have a first name, last name, skill level and age. We are going to kind of display some developers according\nto their skill levels. Okay! So here we have\nthe text labels text to be the first name from the model and the last name from the model.\nNow according to the skill level of this particular object, we are going to set the detail text to junior, mid level or senior.\nAs you can see it's less than equal or\n20 and less than equal than 50. Now and basically that is it.\nModel View Controller. So let's run this in the simulator\nand see what we got. There we go. Joe Doe, Ken Dont, Alex Lorem\nand junior, mid level and senior and that is inside the model, in the service.\nThere we go, let's just take a look at that. There we go. MVC data.\nSo that is basically that. Now this is fine. This is okay\nand many, many times in kind of let me just say not that\ncomplicated structures of a project, this is okay MVC is fine,\nbut let me just point that out that in some cases you want to go even further to MVVM because of the\ncomplexity of the app. Now as you saw we have quite,\nwe have the controller which controls the cells\nand the model they are tightly coupled. That's the problem here and because these are let's just see here in the didSet in\nthe MVC model. We are adding this MVC model and we are doing some logic here which is fine for this\nexample because it's really, really simple, but it will be a pain\nwhen you want to deal with a lot of stuff. Furthermore as you can see here we have the MVC model\nand on that model we also have the age which we are,\nwe're not using it. So if we are not using something\nwe shouldn't add it there. So that's where MVVM\ncomes in and we are going to create a view model for this cell. So let me just close this and go to scene delegate\nand uncomment the second line and comment out the line on 28, 25 sorry. Now let's build and run and basically\nwhat we will get here is the same thing. But with MVVM. Now let me go through and\nhighlight you kind of the advantages of using MVVM.\nSo as you can see we have a Model View and View Model.\nNow the model is the same just so you know. It is the same, it's just the name of the struct MVVM model.\nOkay and that's why we are using the fetch in the service with MVVM model.\nNow here we have view and the view is kind of having this\nview and the controller. That's because we want to of course want to create the\ntable view controller, so we want to put it somewhere in this kind of groups and we are putting it inside the view of this view because we can also have a\nview model for the view controllers view. So that's why we are putting this\nand I set this to view, separated this to view and\ncontroller so we know that these are views and controllers of course. So let's just take a look at some differences. So let's just go into the table view controller and see what we have changed and \nthese are minor changes, so you can follow along.\nFirst of all we have changed the title and we have registers with the new table\nview cell. We are fetching data with the MVVM data and yeah basically that's it, but here and the data we are having\na list of, yeah we are having a list of MVVM models which we are adding this data. So what we have changed is that\non the cell, as you can see we are adding MVVM view model\nwith the data. Now let's take a look a little bit on that view model because that's the gist of this tutorial. So this is the only change that we have made basically.\nLet's take a look at our view model. Now this is a really good example of separation of concerns.\nWe are using this view model on the cell, so we are doing the logic for those\ncells inside our view model. So here we go, we are creating \na name and a level string and inside the initial analyzer we are providing our MVVM model by injecting this dependency. Now the name will be and this is,\nwell this would be okay and also in the cell but you know we are performing logic here, we are grabbing the first name\nand the last name from the model and creating a brand new string here\nand also we are checking the scale level here. So this is much, much more cleaner because \nwe know that the logic is here. Now let's take a look at the cell. So table view cell this is much, much cleaner. There we go. Text label dot text equals MVVM model of course when we do set the MVVM model we run these. Basically these two lines of\ncode and yeah whenever you just want to have a dot notation that is the most you want to have, of course you\ncan have functions or whatever but MVVM viewmodel.name or\ndot level and basically that's it. Compared to kind of wishy-washy approach on the MVC table view controller where we kind of create our name here\nand we check for the skill level. Much more clearer,\nmuch more precise and yeah this is the power of MVVM.\nSo now you know the differences between MVC and MVVM.\nIt's up to you to use the proper architecture in your project.\nNow I want you to hit that notification bell because in the next video\nI am going to talk about how you can create custom frameworks in swift\nand while you wait for that make sure to check out these videos as well too. I talk a lot about Swift,\nSwiftUI in general, UIKit and as usual I will see you in the next one."
    },
    {
        "video_id": "-Hc75RLXPqk",
        "title": "Flutter IDEs Setup -  XCODE , Android Studio &amp; VS Code | #30days series | #EP2",
        "url": "https://www.youtube.com/watch?v=-Hc75RLXPqk",
        "duration": 679,
        "transcript": "foreign [Music] [Music] and today in this episode we're going to be covering platform and tools setup right so we're going to be setting up our IDs and other tools that actually need to actually run our data development so first of all today we're going to be focusing on installing xcode and other ideas like Android studio and vs code these three tools are the tools we can actually use to develop our Android and iOS in Florida right uh how do we do that we're going to head up to the xcode URLs if you go to the description you're going to find the xcode url there's two ways you can actually download that from the web if you click on the link on the description you can find it's going to take you to know about apple.com and you can click on download and then for your machine depending if you're running on the Intel or you're running on the M1 and then if you are actually not on the browser you could also use the app store link it's also linked in the description so you click on it it's going to open your app store and then you can be able to download as well so if you click on the download it's going to probably take 12 gigahertz of space on your machine so you should be able to actually Reserve such space for x squared because xcode takes a lot of time to download so you have a relatively good internet connection then you should be able to download in no longer time but if you don't have they can pause the video and take time and download once you've downloaded that and it's installed then you're going to continue in the video so the next chapter we're going to be talking about running this command if you actually have already installed your xcode and you need to run this to actually configure the command line tools that works with s code so how do you do that because I already have xcode you can see I already have xcode in my machine and I've actually done all the installations that I need as you just downloaded that you need to run this particular command first large kind of it tells the computer that this is the first launch so it's going to set up the S code with the command line so so you don't what you need to do is sudo xcode select a switch application so you're going to open this and then it's going to run sudoescode build dash one first launch so this is going to actually link your s code with the command line source and then make sure to also accept all the licenses in case if there's a license is not accepted you it's a to change it to actually actually accept that at that process and then if you still get issues about licensing that you can also do a sudo xcode license to know if there's any licenses that you've actually accepted so they can actually accept that and once you've done that then we're going to go to the next phase the next phase is being able to set up our emulator so if you map it download xcode that's good comes down with all the things that you need for our simulators right simulators that's actually one of the things that makes the download size to be very large because simulators are kind of large files and comes with different variants of the devices that you actually might want to use in testing so go ahead and type in your terminal open dash simulator just like I did now so you can see it's going to open up our simulator right here so if you have any issue with that make sure you that you actually installed everything that you need to install if you don't have everything installed then this command might not really work for you so but if you have everything working then you can see that opening your simulator is going to show up on the screen like I have right now then if you have your simulator coming up then that's fine then we can go ahead and create our first filter project this is just going to be to be able to test out our app runs on the the simulator like we've actually been able to set that up accelerator is showing up and then we can be able to test that this app can launch on the simulator so what do we do we need to call flutter credit this is where what we did in the previous episode we now come to you so if you're not actually watched The Press first episode where we did the flutter installation and setting up the parts variables they need to watch that part it's one of the most important part of this very of Series so if you don't have that already if you have all these setup already that there's no issues then you're going to wait so right now I'm going to run Florida create to create just a test application we can run on screen to see how how that works so you can see running the command if you want to create and then the name of the app so once you do that it's going to actually deploy that to our machine and once we do the deployment on the machine our project has been created and it's running all right run photos on on the terminal and then you should be able to see that your app launches with the default application that comes when you create a photo project we're going to walk through that particular application in the next episode but let's continue to the next phase so having tested that we have actually been able to install our xcode and we've been able to launch our flutter app on the simulator that's the icon simulator so let's go ahead and go to the next phase of installing installing our Android Studio so we're going to install Android Studio next alright so Android Studio is the next thing you need to do so if you click on the link on the description you're going to find where we linked Android Studio installation Edition that's going to link you it's going to take you to Android development of android.com forward slash Studio that's where our Android Studio is located so you can actually click on download and after it's downloaded you can actually launch the installation process so and make sure you actually accept all the command line tools and SDK video tools that actually prompted it's very important that you check the build tools yeah one of the things that you actually need to actually develop your Android apps right so once you have that accepted license then you can go ahead and download so I'm going to give you some short short time to actually don't do installation because it's going to take a few minutes to install all the necessary sdks and tools and once you've done that there's one more thing that we need to do to make sure our Android Studio is going to run perfectly well without issues because Android is not that complicated like xcode would be so let's do that next so let's head to our Android so if you go to preference from Android Studio you go to plug in and then you head to Marketplace if you see my Marketplace is actually where you can actually find other plugins that you need to store to support your Android Studio application all right to enhance the application that you actually use to develop your apps could be native Android development it could be a flutter developer so right now we're going to install two plugins the first one is flutter so you search for type floater in the in the search field like I'm doing now we're going to find flutter and then you install it I already have that installed and also access that and type that and install that I already have that so you can see then if you don't do two installations just need to restart your Android Studio so if you install your I restart your Android studio and you should have that installed and then it's going to actually ask you to set up the SDK the location of the SDK so you're going to point it to the same location where we kept our SDK which is for my own case I kept it in the document Dev tools plotter right so you're going to point it to the right direction so that Android Studio should be able to pick the parts to that SDK all right once you've done that then your day use your Android Studio so if you look at mine and see from what I have here that this is the basic thing you need to do just thread into your preferences from click on Android Studio you could click on that right so you can see once you have this tool installed then you have everything ready and then you should have a flutter SDK locator so once you create once you want to create a new project now 100 so if you go to new and then new projects then you should be able to find an option to create new photo projects all right that that means that it's been able to pick that up and if you don't have that then it means that the plugin is not installed very well and then when you're trying to onboard a new flutter project via Android Studio it should also ask you the location of the dev tool so you should be able to point to where that SDK path is so if the SDK part is missing it's going to show you on the new photo projects flow all right and that's it uh for this one and then the next one we're going to be doing is installing that on our vs code which is quite simpler almost the same thing we need for our Android series we're going to be doing so just head to the next link which has vs code if you don't want to use vs code then it's okay you can skip but the same thing is just optional so depending on the particular ID that you want to use then you can actually use that so we head up to the link just go the link in the description once you click on that it's going to take you to um which code.juststudios.com and I'm going to download visual studio code so once you download that make sure you click and install the editor and then launch this editor once you learn the Educators like I have you can see then you can see that we have a blank screen and you can go straight up to our Azure agent is up just go to views sorry view if you go to view click on command palette command palette is going to bring up a kind of search field right so you type install as when you type in store you're going to find an option select extension so you're going to find that so you click on view click on command palette and type install and select extension install extensions all right so once you select that like you can see then it's going to bring up the extension tab you can actually see that there's an extension tab at the left of the IDE now so you can type the floater on the search field so when you click on when you type in flutter you're going to find the different uh so kind of listings anything related to floaters just like you can see on the screen now so once you have that all click on install flutter the one that has specifically flutter on it so you can see I already have that installed in my own case so but if you type in clutter you should have an install option but if you already installed that you're going to see like a call or a settings icon so I already have that installed so you're going to install a floater and then also install that these are like plugins specific to uh extension specific vs code right so once you install those two stuff then you are done and then you can close the ID and just relaunch it just to be sure that everything was installed very well so once you do that then go back up to the command palette just like you did view command palette and then type in uh doctor as you're typing in doctor you're going to see flutter colon run Florida doctor and then you're going to select that from vs code and once you do that it's going to actually initiate flutter down so this is just like the issuing the command front adapter we did uh when we're trying to do that for uh for vs code right so once we actually remember in the first episode we installed our flutter like we did a command that we actually used to create our flutter project the one we use in testing so if you run plot adapter from the SDK from the ID here you actually see that you're going to have the same effect so if this did not work then you need to go back to you and watch it again and see if there's something else they're missing out then if there's still something that is not working as it's supposed to be they can leave a comment in the comment section I'm going to actually attend that and someone else I probably have been able to set it up you'll be able to help and I also will be willing to help I can also shoot me a deal on a Twitter account on the description and I will be able to also assist you so if you're actually getting to this point then you've actually done a lot and I'm happy that I've actually gotten to the point where you're ready now to actually start getting into the North and boats of building and flutter app so make sure if you're actually on this particular episode and you actually missed out something from the initial ones then you should also go back to that particular episode you can see that it's also going to be a description and also at the end of this video so you can actually use that to edit the video and watch it and be in sync and if everything is done then let's head up to the next episode and we're going to start building our apps see you guys foreign [Music] [Music]"
    },
    {
        "video_id": "HL5tLcmAoJs",
        "title": "setting up flutter enviroment for vscode , android studio and Xcode - Install",
        "url": "https://www.youtube.com/watch?v=HL5tLcmAoJs",
        "duration": 1224,
        "transcript": "very easy how to set up your flutter environment to start your development and uh probably people love using the vs code and some also are really in love with the android studio so i basically use both of them and but mostly i use the vs code and then i use their android studio emulator to test my code and i also use the x code as well to to run my my uh ios code okay so let's get started so to actually start you basically need to open these three sites only three sites two four four one you can get it yeah so first what i do to set up is to first get my xcode and xcode you can simply get it on the app store so you simply open the app store first then you search for xcode in the app store okay as is opening now you also need this the flatter sdk itself you need that one to set up your what your project okay so normally i do install the xcode first so that i can get my uh simulator for my s code to test yeah very easy to set up so since i have already installed the s code here so you if it's now that you're about to start you can just do get what get xcode but if you are using windows then you can simply go straight forward by using the android studio but if you are using mac you go and then use a get what xcode then the s code will finish downloading after it finish downloads there's nothing else you have to do just leave it like that okay so let me minimize this next is to get your flatter sdk which depending on your platform or os so i'm using mac so i actually have my flatter already downloaded and i'm gonna show you later so any of them so if you click on probably mac os it should take you to the downloading page okay so this should open up good and then you get this so you just simply click on this and then you download this okay i already have this okay so let's say you have finished downloading this what you need next is to get your vs code or android studio but let's say most people will be going for android studio because some of them some of you love the android studio so you just type android studio then you open the android studio then you get your vs code here as well so vs code so the first one good so android studio yes so you just choose your options but basically it might pick your default machine and the latest one here which is the bump uh bam bb right so you get it and then you download it but i already have mine so i don't need it right now where is my this one okay so i have installed it after installing this i'll take you through one or two stuff then your visual studio you get your visual studio for mac if it's windows linux whatever you want to download you just get this okay good so let's say now you have your visual studio one and then you have your android studio two and then you have your xcode but the x code you don't necessarily need to even open it after downloading is just fine just leave it like that okay good so for the android studio no sorry for the x code what you'll be needing here is only using the simulator so to open the simulator you can just go into your term now and then type open dash a simulator yeah then you just click enter or retain and then it's gonna actually open a simulator for you xcode simulator for you yeah maybe at the first time it takes a little bit of time so you need to just wait for it to open okay so now we are done with getting the x code and then their simulator okay now we go to first what should we do i love vs code so let me begin with the vs code but before this you need to set up your environment okay so let's say let me open this let me open this so let's say i probably have i probably have uh i have my flatter here so i just dump the flutter in here inside my home you can actually dump it anywhere it does not really matter you just have to point the path to this okay so since i have this one here i need to first set up my path right okay so to set up your path you can use the teminar to actually get your path okay let me see it seems um yeah but first what i do is if i'm not gonna use the global environment to access my flatter i can simply go to the extensions here and then search for flatter okay so if you search for flutter at your extension you get this i have already installed this is disabled by your side you see install so you install this okay so after you have finished installing and you have your flatter sdk somewhere sitting on your computer which is here in my root and flutter you can simply go ahead by creating a project and this will be very easy for you to select the path without going through all this hell of setting the path for your global if you only want to use this in the in the vs code so i mean using only temena to communicate with your what with your flutter project so you can simply go press command p and then go uh the greatest sign symbol then you probably type maybe flatter or anything so when you click on let's say flatter new project so you need to click on this since you have installed this and you do this if you don't have the path search it's going to prompt you here select down here which is not showing because i have already done my to show down here that locate sdk then you click on the locate sdk then you navigate to this path which is here and then you only open like this you don't open a folder you just open flutter just like this and then you click uh set sdk which it will be showing on an icon here which i've already done then it will set your sdk path for you where you don't need to go into your terminal and you can simply run flatter doctor to see whether it works that's v then it's gonna work perfectly good but if you sometimes want to use your terminal then you need to actually set your path that is the global path for your flutter project so how do we do that to do that uh let me close and open again just default then you type in here them then open some file for you and that file is where you need to set your path which i've already done so i'm going to show you how to do that so vm bash first you go to vim bash underscore profile so van bash underscore profile enter okay so for yours everything in here will be blank there'll be nothing here okay so what you have to do is to make sure you set your path you will not see anything so probably you need to write this down in your notes or probably on word or pad or something you need to write all this down here will be empty then you copy and then paste it right here just paste it at the top so let's see let's look at how the path work if you can see this this is users pen slash flatter bin cache blah blah blah so you can actually pick the location here flutter you see is that ben so let me let me go and move it to this side so you see users so this is actually users so as you can see here mac users banned right and slash flatter so i open flutter so you can see flutter here then i open bin you can see bin here then inside the bin i open cache okay and you can see cache here that sdk this is it then you go to the bank okay so this is the path if you set or the down here like this you just uh right click and then copy then you get a path okay then you can use that for to set up this so here you only need to change the username for yours so where your flatter is folder s and the pin which is uh basically the same for everybody so this part that you need to check well where do you place your flutter that is the path you need to add there and then this is actually for people in china so you can use this or the main flatter dot dev or whatever yeah push back you can use the normal one or you can still hook up to this and it will work fine so this is for the dot bash okay all right so how did i get the path you need to just set uh set your view is it the view view yeah so here hide path but if i hide the path you see it's gone so if you go to show path good so if you are using mac you can easily get if you are using window you just make sure you follow the path then you copy the path then you can replace it with this on your notepad or word or whatever it is make sure you set it up before you paste it in here because typing in here sometimes it looks weird okay then you paste it after you paste it then you use the uh shift word shift how do we cause semicolon then you type wqo then exclamation site then you click enter so i'm done with the vim now let's go with the bash no not the bash we go to the next one we're gonna set another path so that it will be global so we gonna set another one we type them mostly some of them you use the bash and it works fine but some you need to set the two so i i always recommend that you set the two so that you don't find yourself one thing so i use the vem vem dot s h you getting is right so the first one was the profile this set uh this one is z h r c yes that h r c okay then you press enter when you press enter you see there's another path setting in here so here is basically like the first one but there's a small slide change in here so you see here we have the path pointing to our android sdk platform tools which is in library so you make sure you have that so if i go here you could see that in my library android where is it this and then you go to sdk then you go to platform tools this one okay good tools then you just select the path from here yeah and uh here is also user band flatter where your flatter is and you can leave this like this or you can use the globe award or you can use the global uh global link for it but this will work fine as well yeah but this is basically for people in china who have to set this like this but if your our side is also fine it's always updated as well so this is for the path then you do the same thing and then you save as i did you save okay so after saving this now you can run your flatter you can run flatter doctor okay so you run flatter doctor flag the doctor that's v and then it should actually show you the flatter doctor information for your flutter project so if you runs like this then everything is perfect if you're having an error of install cmd cmd line two something something install which you do uncheck here you need to check my previous video where i have done a tutorial on how to solve those errors when you run your flat adopter it will look like this yeah under this one you see cmd2 not installed yeah just check my previous video it will look like this but since i have installed my you won't see it here so now we are done with the global assessing of your flatter and we are done with the vs code you have installed the flatter to enable you run a flutter in your project using the vs code and then next is to check the android studio so android studio what you basically have to do here is to make sure you go to preference and for preference make sure you have your sdk platform installed which will be using for your vs code or probably using the android studio itself and make sure you install this this is what i was talking about sdk command line make sure it is installed the latest one is installed so that it does not give you any error of accepting uh android license then you make sure your path is set well for this so use this pen library android make sure you set your password and you download some of the android emulators you need that you can use in your project okay so basically that's all but if you want to run a flatter in your android studio then you need to make sure you go to plugins and then you search for flatter it's loading you search okay so after loading you search for flutter okay you can see flatter here if you can see just search in there search bar up there and it's gonna be first so when you click on install which i like to install now but it will take some time never mind when installing it's gonna prompt you after it installed a flatter it will prompt you that you do want to install that that was in the previous one i think this one will also be the same then you also click yes and stop that and then install everything and now you can close this and open again and you can actually create a new project where you're going to have a button to say create a flat a new project and then we also have create android new projects but if you are using flatter you select the create what flatter new project in the android studio good so i think i have basically covered everything but for the path if you are using m1 i'll recommend you that is a macbook will recommend you to actually read the documentation because some marks have a little bit of weird way of stressing the path which you need to actually grounds through the documentation for you to know what is going on or how to set for what for other machines yeah but basically it's really really easy okay so our next installing this getting this installing your flatter by searching plugin i'm just going over it uh searching flatter install that also come here install your flatter and then go here set your path for both so that you don't find yourself wanting your bash profile and then your zs hrz you set it for that and then you can also set it for the vs code where i showed you the easiest way is to install after installing this and then you have your sdk somewhere sitting on your computer you get a path you know the path already and then you just press command p then greater than sign then you go probably a new project you see flatter new projects you click on it it will give you a pop-up if you have not selected the path for your sdk at the first time down here you select sdk path here then you navigate to your flatter just open the flatter like this just open it like this using the navigator and press ok and that is it you can use your terminal here without setting this or you can set both and that is okay if you have any question for setting up your flatter project for the first time kindly leave a comment down below and i'll get back to you as soon as possible peace i'm out"
    },
    {
        "video_id": "f09c-nw15K8",
        "title": "Install Flutter on Mac ( M1/ M2/ M3) | Android Studio | Xcode Simulator",
        "url": "https://www.youtube.com/watch?v=f09c-nw15K8",
        "duration": 885,
        "transcript": "hello everyone welcome back to another video so in this video I'm going to show you how you can download and install flutter onto your Mac so for that you just have to go to your favorite browser and source for flutter and just go into this post link from flutter.dev so just click here and click under this docs and just click on this get started click on Mac OS and here you can see the documentation for installing the floated onto your Mac so the first thing is you just have to have the operating system a Mac OS and version 10.14 later and you just need to have the Dixie space of 2.8 GB and then you have to install the git and xcode as well so first let me install the gate so to install git just open the spotlight Source by just typing command and space and search for terminal and now to install git so we just have to install the home brew so for that just type Homebrew and just go to this and just copy this command from here so once you copy this commands just paste inside the terminal so let me just paste inside terminal and just click enter and enter the password of your Mac and just click on enter or written so this should now start installing the home brew until system so once this is done so here you can see the next step here so you just need to copy these two lines of command so let me just select these two lines and right click and copy and the expression command and B to paste and just click enter so this should add this command so like you know opt Homebrew and Brew environment into the dot jet profile so once this is done so let me again go to the uh flutter documentation here and here you can see the Florida SDK so we just need to download this flutter SDK so here you can see the option for Intel and here you can see the option for Apple silicon so since I'm using the MacBook M2 so I would be going with the Apple silicon so just click here so this should start downloading the gif file so let's wait for it to complete first so once this is downloaded let me just go into the folder and let me just drag and drop into the desktop all just you know you can just keep it wherever you want and let me just double click onto this ZIP file to extract it so once this is extracted so let me just go into this flutter and inside bin so we just have to copy the path of this bin so before that let me just again move to the documentation here and you can see so we just have to add this plotter tool path so to do that so we just have to go to the terminal again and here so we just have to open the dot Z profile so for that you just have to type Nano and just type dot Z profile and just click enter so this should open this dot Z profile and this is the path which it just added while installing the home row so just come just below here and you just need to copy this export path so let me just copy this path from here and go into the terminal and just type command and B to paste and instead of this path so we just have to copy the path of the flutter bin or which we have just extracted so let me just go into the finder and I have extracted inside desktop and inside the flutter and inside the bin so you can just go into this bin and right click and you just have to press on the option key of your keyboard so if you just press an option so you can see so The Copy being as path name so you just need to copy this path and this come inside here and let me just clear this from here and until here and we just need to press command and B to paste so you can see this is the path where I have just extracted my flutter and inside the bean so once you do that so we just have to uh pressure Ctrl key and O at the same time just type control and O to write out and click enter and just type control and X to exit and now if I just type cat dot Z profile and just click enter so you can see the export path and path of the folder has been added now to refresh the environment so you can just type source and just type dot Z profile and just click enter so this should now refresh the environment as well so let me just close this one from here and once you do that so we just have to uh type flutter to determine if there is something something remaining to install so just type enter so let me just click and allow so here you can see so this is showing we'll come to the flutter so let's wait for it to complete so if you just scroll up here so you can see so we have to install the Android Studio which we will do later and before that we have to install this xcode so to install xcode so this there might be some link here or you can directly go from here as well so let me just ah scroll down here so here you can see to install the xcode so this web download so let me just go into the web download and you we will directly get the option to download here so you can just click on download and click on the website and you just need to enter the Apple IDs so once you log in so if you just scroll down so you will be able to see this xcode 14.3 here so we just need to download this xcode GIF so this is 7.1 GB so this might take some time to download one eternity later so once this xcode is downloaded so let me just go into the finder and if I just double click onto this so This should start extracting this ZIP file so again this might take some time to extract so once the xcode is extracted so let me just drag and drop into the applications so once you extract the xcode and drag it into the application so let me just close it again and again go to the documentation and so now we can launch the simulator so before launching the simulator so we just have to use these two commands so let me just copy these commands from here and again go to the terminal and paste it inside here by just pressing command and V and just enter the password of your Mac and just click enter so this should now install all the things that are necessary for running the simulator and just click enter and we just need to press in queue and just click enter and this should be done I guess so now to open the simulator so you can just type open hyphen a and just type simulator and just click enter so unable to find the application named sync something like this just because we haven't opened the xcode until now so to do that so let me just go to the launch pad and open the xcode just simply open the xcode enter the password of your Mac and just click on install so here you can see so the xcode is properly open here so if I just close this one and again type the same command open hyphen a simulator and just click enter so now this should launch the simulator so here you can see so this is iPhone 14 pro Max so this is how you can open the iOS simulator so I would later so how you can do the same thing with Android studio and open the Android simulator so before that so let's wait for it to open so here you can see so the iOS simulator has been successfully opened here so let's install the Android Studio so and then I will show you how you can run on both uh this iOS simulator and as well as the Android simulator so for that let me just go into the browser and source for Android studio and just click enter and you just need to go into this second link so developer android.com and here you can see so the download Android studio and if you just scroll down so just click here and since I am downloading for MacBook M1 so just go with the Apple chip so just click here and just download in the downloads folder so once this is done so let me just so in finder and if I just double click onto this DMZ file so so this will open the installer here so we just need to drag and drop this Android Studio into the applications so let me just drag and drop here and so this is copying the Android Studio applications so let's wait for it to complete so once this is done so let me just close everything from here and if I just go into the launch pad and here you can see so Android Studio has been already installed here so let's wait for it to open and just click on open and do not import the setting click OK and on send so click on next and standard installation so you can just go with the Dark theme and just click on next so you just need to save the license agreement also click here and also accepts the license agreement click on finish so this might take some time to install all the components here so I think all the components are downloaded so let me just click on finish so once you install this Android Studio so you just have to install one plugin so just go into this plugin and just go into this Marketplace here and search for flutter and just click enter and just click on install and this will at the same time install the dot language plugin as well so just click on install so once you do that you just have to restart your ID so just click on restart so once you restart your ID so now you can already see so there is option for new flutter project so just click on here and you just need to choose this flutter and this will automatically detect the SDK path and just click on next and you can just give the name something like my app or you can just give according to your preference and here you just need to give the organization so let me just give something like code with Arjun and you can just give your name as well here so just click on create so this should now create a new floor project so here you can see so you just have to choose this project and if I just go into this it's not Android so you just have to click on project and if I just go inside this library and inside here so you can see the main dot here so this is the main Dart file from where we have to start writing the code so I guess this is not working so let me just quit this one and again just copy the same command this open hyphen a simulator and again go to the terminal and paste it inside here and just click enter so this should open this iPhone 14 pro Max simulator so once this simulator is opened so let me again go to the Android studio and to run this application what we can do is we can simply go into this terminal here and just type slot R and just type it on and just click enter so this should now run this application so if I just go into this simulator so here you can already see the app is successfully running here so this is how you can test your uh app into the iOS simulator so let me just close this one so now I will show how you can do the same thing in your Android simulator as well so for that so you will be able to see this device manager here so just go into this device manager and here you can see so the pixel 3A has been already set up here so you just need to Simply click here on to this launch this avd manager so here you can see so this is already running here so let me just minimize this one so this is running here so this might take some time to start so here you can see the running device is pixel 3A so let me just minimize it from here so this will run here so in this tab so here you can see the pixel 3A also has been started successfully so now to run this application again we can go into the terminal and just type the same command flutter on and just click on enter so this time so this will run inside this pixel 3A so the device selected is this pixel 3A so let's wait for it to uh run so here you can see so the build is successful and it's installing the app so here you can already see the sign of this flutter so this might take some time to you know like open so here you can see so if I just minimize here so this is the flutter app which is running here so this is one way you can run it by using the terminal so let me just press on Ctrl and Z to quit the terminal or you can just simply press here so on to this run main the dart if I just click here so this should also run the application and from here so you can just use the hot Prelude as well so if you change something here and just save it so it will just reflect here so you don't need to restart or just type flutter on every time so let's wait for it to install here so so here you can see so the app is running successfully so if you just scroll up here and if I just change this flutter demo home page into something like code with origin and if I just type command and S to save so this suit now since here so you can see all it's already changed here so you don't need to read on the application so you can just simply change whatever you want so if I just change this you have pushed this into something like demo changes and if I just save this one so this should instantly change here so this is how the hot reload also works so this is how you can install the flower into your Mac and also run your first project using the iOS simulator as well as Android simulator at the same time using the Android studio and thorus thank you so much for watching if you like the video be sure to like share and subscribe I will see you in the next one"
    }
]