[
    {
        "video_id": "-HafzawNlUo",
        "title": "OOPS CONCEPTS - JAVA PROGRAMMING",
        "url": "https://www.youtube.com/watch?v=-HafzawNlUo",
        "duration": 1224,
        "transcript": "[Music] hello friends welcome back to our channel so in the previous session we have seen the Java buzzwords so that we call it as a features in this session let us have a look on the whoops concepts so what are the hopes concepts object gas affection and cancellation inheritance polymorphism so this we call as oops concepts now let us see one by one first what is meant by object so an object is defined as a real-world entity so whatever the thing we are seeing in the real world that can be treated as an object so this object is a real good entity and this object consists of so properties and the tasks performed by us perform by this object so whatever the real world entity which is having these properties in the past some tasks to be performed those we call as an object let us take an example human human being is also an entity and it's an also an object so human consists of properties like name the color height and etc so these are the properties so what is lumen can do task one of the past can be done by this would be one the right exactly so these are the tasks can be performed by this human so we can consider this human as it object hope you understood so object is a real world entity which is having the properties and some tasks that get that it can be performed right no what about the class s is a group that objects object follows the object follows so it is a blueprint that an object follows so without the class object is not there so this class consists of L number of objects number of objects consists of number of objects and the object can be defined as instance of a class instance of a class so the base object will follow the prototype defined by this class example let us take a student student in a class student in a classroom so what are the properties so properties all variables you can say them as so properties of the student 1 screen name to get Holdenville and student date of drawing they'd of joy right so this is a gas and all the objects which are defined by this gas should follow this prototype so that for example a student in a class there are n number of students every student can be considered as an object which follows the same for prepare and one of the hostage to be performed by the student read write play right so every student can have three properties rail right in play every student will be having the three company's name roll number and some date of joy so whatever the objects created through this class will follow the same structure but face objects so student consists of a number of objects so student class comes yourself some ABC the name of a student here we see some deal some change so ABC will be having name whole number date of joining name whole temple gate of joy similarly GHI so here the abcdefgh a of the mains name of a student let it be like something sandy and some fish roe remember and they don't work and for every student will follow some properties some rain write and play so these three properties can be done I mean invoked by this legacy and this properties can be applied for BEF and this properties can be done by GHI so I am object is an instance of a class and a class is a blueprint that the object shoof all right so I can consists of n number of objects many number of objects hope you ever saw this object in class because our channel programming completely deals with these two things tasin object for everything we will create a chasm we will create an object so a casts cannot crisis the methods of another gas directly so one can methods cannot be invoked by the another another gas so in order to access the methods of another class one can should create its own object so simply we can say a classes cannot communicate with each other but in order to communicate with each other objects should be read so for every communication objects should be created so if Cassie and Kashmir wants to communicate so here the communication means invoking the methods of one class by another gas so every class is having the methods right so tasks so invoking those methods or tasks from one class to another class is called a communication and this cannot be done between two classes and this can be done only between objects so in order to communicate two classes first the instances should be generated and through those instances though the two classes will be communicated so hope you understood this thing the castle object next abstraction a fraction means showing only essential parts only essential parts and hiding the implementation details this is called abstraction this can be achieved in this Java programming just the best example so if you download an Android application from the Play Store so we mitigated dot the apk file right not apk file or you can download a software so that we can get gone exe file and if you run this exe file we can get the software and we can use the software but here we can't see the packages or our methods or a functions which are used to create this exe file that means all the implementation part is hide you and only the essential part is visible right so this is the best example so similarly if you download an application from Android Play Store you will hear a dot etheta file but you will not get the method sort of packages or any functions which I have written to generate this dot apk file so all the implementation details will be hidden right so this type of applications can be done in Java programming that we call it as an abstraction or a data hiding I hope you understood this abstraction next one so object class instruction now and capsulation encapsulation so this means binding variables and the methods under single entity binding the variables and methods under single entity so see for it understanding will write here so class is having three parts what is the name of a class so this is a case here we will write the variables and here we will write the methods similarly object is also having the name variables and methods sim simply we can say student is a class having the variables name whole number and a date of joining and the methods read/write okay thanks so this is a cache so here we are writing the variables and these are all variables and this we call as methods right these are core variables these are core methods so here we are binding these variables and methods in a single entity we call it as class or object so object is also having the same structure that means one class will be having in whole number character name and similarly the real method right method so one cast consists of variables and the methods right so this is called encapsulation so hope you understood this one next travel to the next concept in radians inheritance so what is between Higgins acquiring the properties of one class to another class acquiring the properties of one class to another class simply with let's say it does parent class and it changes so chain casts will acquire the properties of parent class right changes will be having acquiring the properties of painting class so this week on it has this class or we can call it this change has will be called as day right so an herbal class is a class which is there are from the base class there are yes or you can call this parent as superclass and this change classes sometimes right so acquiring the properties of one cast to another dress so here acquiring the properties of parent class to the changes so this this concept we call it as inheritance so here there are different types of inheritance right so we will have a single inheritance multi-level in evidence hi lyrical ingredients so let us see the basic interaction then we will move on by one by one right so we will see one by one concept in the depth now in this session let us cover the interaction of all these object-oriented concepts so we can have these three types of in hidden single multi-level and character so this is called inheritance concept next coming to the polymorphism so performing the same tasks same task in different ways in different ways that is called as a polymorphism here tasks means a method method so in working the metal in different ways for example if we are having a program or addict of two numbers we can write and simply we can call ahead without any parameters we can call ad with into a comma in to be right so two methods so both will perform the same task but implementation is different here we are not passing any arguments and here we are passing only I mean two arguments right then this type of implementation we call it as a polymer let it be one more example I will explain so I am having the method called drop polygon drop polygon so this drop one hand can be anyone so we can draw circle as I say it's a polygon so we can draw square we can draw rectangle we can draw a triangle right so both all the three are the polygons all the three are polygons so here just I am implementing properly done and that drop polygon can be square rectangular finding that means implementing this task in different ways this is called polymorphism so this can be achieved in Java by eg by every building method overloading method right and method overriding so the conversations we'll see what what is meant by this method overloading and methylome right so with this we can implement thump I thanked by polymorphism and with this one-time polymerase so we can achieve the compiled them our polymorphism by implementing method overloading and we can achieve this runtime polymorphism by implementing method overriding okay so we will see one by one in the further sessions hope you understood the basic concept of this polymorphism right so these are the concepts of object-oriented programming so object casts abstraction encapsulation inheritance and polymorphism so if you are having any doubts regarding this oops concepts feel free to post your thoughts in the comment section so that I will definitely try to clarify all your doubts and if you really understood my sessions share my sessions with your friends and like my sessions and don't forget to subscribe to our Channel thanks for listening thank you very much"
    },
    {
        "video_id": "pTB0EiLXUC8",
        "title": "Object-Oriented Programming, Simplified",
        "url": "https://www.youtube.com/watch?v=pTB0EiLXUC8",
        "duration": 454,
        "transcript": "[Music] a popular interview question concerns the four core concepts in object-oriented programming this concepts are encapsulation abstraction inheritance and polymorphism let's look at each of these concepts before object-oriented programming we had procedure of programming that divided a program into a set of functions so we have data stored in a bunch of variables and functions that operate on the data this style of programming is very simple and straightforward often it's what you learn as part of your first programming subject at a university but as your programs grow it will end up with a bunch of functions that are all over the place you might find yourself copying and pasting lines of code over and over you make a change to one function and then several other functions break that's what we call spaghetti code there is so much interdependence e between all these functions it becomes problematic object-oriented programming came to solve this problem in object-oriented programming we combine a group of related variables and functions into a unit we call that unit an object we refer to these variables as properties and the functions as methods here's an example think of a car a car is an object with properties such as make model and color and methods like start stop and move now you might say what marche we don't have cars in our programs give me a real programming example ok think of the local storage object in your browser's every browser has a local storage object that allows you to store data locally this local storage object has a property like length which returns the number of objects in the storage and metals like set item and remove item so in object-oriented programming we group related variables and functions that operate on them into objects and this is what we call encapsulation let me show you an example of this in action so here we have three variables base salary over time and rate below these we have a function to calculate the wage for an employee we refer to this kind of implementation as procedural so we have variables on one side and functions on the other side they're hard decoupled now let's take a look at the object-oriented way to solve this problem we can have an employee object with three properties a salary over time and rate and a method called get wage now why is this better well first of all look at the get wage function this function has no parameters in contrast in a procedural example our get wage function has three parameters the reason in this implementation we don't have any parameters is because all these parameters are actually modeled as properties of this object all these properties and the get wage function they are highly related so they are part of one unit so one of the symptoms of procedural code is functions with so many parameters when you write code in an object-oriented way your functions end up having fewer and fewer parameters as Uncle Bob says the best functions are those with no parameters the fewer the number of parameters the easier it is to use and maintain that function so that's encapsulation now let's look at abstraction think of a DVD player as an object this DVD player has a complex logic board on the inside and a few buttons on the outside that you interact with you simply press the play button and you don't care what happens on the inside all that complexity is hidden from you this is abstraction in practice we can use the same technique in our objects so we can hide some of the properties and methods from the outside and this gives us a couple of benefits first is that we'll make the interface of those objects simpler using an understanding an object with a few properties and methods is easier than an object with several properties and methods the second benefit is that it helps us reduce the impact of change let's imagine that tomorrow we change these inner or private methods these changes will leak to the outside because we don't have any code that touches these methods outside of their containing object we may delete a method or change its parameters but none of these changes will impact the rest of the applications code so with abstraction we reduce the impact of change now the third core concept in object-oriented programming inheritance inheritance is a mechanism that allows you to eliminate redundant code here's an example think of HTML elements like text boxes drop-down lists checkboxes and so on all these elements have a few things in common they should have properties like hidden and inner HTML and metals like click and focus instead of redefining all these properties and methods for every type of HTML element we can define them once in a generic object call it HTML element and have other objects inherit these properties and methods so inheritance helps us eliminate redundant code and finally polymorphism poly means many more means form so polymorphism means many forms in object-oriented programming polymorphism is a technique that allows you to get rid of long ethanol's or switch and case statements so back to our HTML elements example all these objects should have the ability to be rendered on a page but the way each element is rendered is different from the others if you want to render multiple HTML elements in a procedural way our code would probably look like this but with object orientation we can implement a render method in each of these objects and the render method will behave differently depending on the type of the object you're referencing so we can get rid of this nasty switch and case and use one line of code like this you will see that later in the course so here are the benefits of object oriented programming using encapsulation we group related variables and functions together and this way we can reduce complexity now we can reuse this object and do from parts of a program or in different programs with abstraction we hide the details and the complexity and show only the essentials this technique reduces complexity and also isolates the impact of changes in the code with inheritance we can eliminate redundant code and with polymorphism we can refactor ugly switch case statements well hello it's me mash again I wanted to say thank you very much for watching this tutorial to the end I hope you learned a lot please share and like this video to support me if you want to learn more about the object-oriented programming as I told you before I have a course called object-oriented programming in JavaScript if you want to learn more click on the link in the video description and enroll in the course if not that's perfectly fine make sure to subscribe to my channel because I upload new videos every week thank you and have a great day"
    },
    {
        "video_id": "m_MQYyJpIjg",
        "title": "Fundamental Concepts of Object Oriented Programming",
        "url": "https://www.youtube.com/watch?v=m_MQYyJpIjg",
        "duration": 556,
        "transcript": "the four fundamental concepts of object-oriented programming are abstraction encapsulation inheritance and polymorphism before considering what they mean first consider what is an object an object is a thing from the real world it could be a car a boat or a book but it might not be something physical that you can touch it could be a dental appointment a seat reservation for the cinema or a bank account in the realm of object object-oriented programming an object is anything of interest to the software application that you're building it's anything that you want to store and process data about another name for an object is an entity this leads us to the first fundamental concept of object-oriented programming namely abstraction abstraction means to simplify reality for example a person is an object but if you were designing a new application to process data about a person it's unlikely that you'd be interested in everything there is to know about a person rather you would only concern yourself with the data that are relevant and the tasks that you want to perform with those data to create objects programmatically you need a class a class is a template for creating objects a class is code written by a programmer to define the attributes and the operations of an object attributes describe the object they're sometimes referred to as fields because they contain data most programmers know them as properties properties are coded within the class either as public variables or as property procedures operations are actions that can be done to or performed by the object they're sometimes referred to as behaviors but more commonly they're known as methods methods are programs within the class that are coded either as procedures or functions a class is a template for creating objects and it's often compared with a pastry cutter because once it's been written it can be used to create many objects of the same type in fact a class is sometimes referred to as a type each object is an instance of a class in the computer's memory creating an object from a class is therefore known as instantiation once these objects have been created their properties can be assigned values making each object of the same type a unique entity each property is defined in the class by a property procedure which may include code to validate a property value while it's being assigned this helps to ensure the integrity of the data contained within the object the property values that have been assigned to an object are collectively known as the state of the object it's also possible to assign values to properties while an object is being instantiated by means of a special method called new this method is known as the constructor the second fundamental concept of object-oriented programming is encapsulation this means to hide the complexity of the inner workings of an object from the programs and the programmers that make use of it it's often referred to as information hiding because the data contained within an object and the functions that manipulate the data are bound together and therefore safe from outside interference in some big software development projects it's common for more experienced programmers to write the classes that will be used by the junior programmers a class might be made available in the form of a class library indeed some software development companies specialise in developing new classes to be used by other software developers compiled class libraries protect their intellectual property to write code that will create an object from a class then set its properties and call its methods it's not necessary to understand the inner workings of the class all the programmer needs to know is the name of the class the properties and methods available and any data that need to be supplied when they're called in other words all our programmer really needs to know about is the interface of the class the implementation code of those properties and methods can remain a mystery this greatly simplifies the use of objects and helps to ensure that the data and operations encapsulated within are safe the third fundamental concept of object-oriented programming is inheritance this means that a class can derive its methods and properties from another class inheritance can result in a hierarchy of classes for example this person class defines the methods and properties of a person object an employee in a business is also a person so through inheritance an employee class derives the methods and properties of the person class an employee is a type of person a customer of the business is also a person so through inheritance a customer class also derives the methods and properties of the person class a customer is a type of person an employee class can have some extra properties and methods of its own it can extend the person class and so can a customer but it need not stop there a programmer is a type of employee and so is a manager and a cleaner inheritance defines type of relationships the class at the start of the inheritance hierarchy is called the base class any class that derives from another class is called a sub class any class that is derived from is called a superclass the final fundamental concept of object-oriented programming is polymorphism polymorphism means that a class can implement an inherited method in its own way the person class at the base of this hierarchy has a method which will save details of any object created from the person class perhaps to a database thanks to inheritance all of the classes in this hierarchy do exactly the same thing but it may be necessary for a customer's details to be saved differently perhaps to a different database polymorphism allows for this the customer class can override the workings of any method or property that it inherits with a new version of its own different forms of the same type of object with the same interface can behave in different ways polymorphism literally means many forms to recap the fundamental concepts of object-oriented programming abstraction means to simplify reality and focus only on the data and processes that are relevant to the application being built encapsulation means that data and the programs that manipulate those data are bound together and their complexity is hidden inheritance means that a class can derive its methods and properties from another class this might result in an extensive hierarchy of superclasses and subclasses polymorphism means that different subclasses of the same superclass which therefore share the same interface can implement those interfaces in their own ways by overriding the code of the methods they inherit"
    },
    {
        "video_id": "URZYJlO3tbE",
        "title": "Object Oriented vs. Procedural Programming Paradigm",
        "url": "https://www.youtube.com/watch?v=URZYJlO3tbE",
        "duration": 220,
        "transcript": "In this lesson, we will explore what are programming\nparadigms and henceforth differentiate between Object-oriented programming and Procedural\nprogramming. So let's start with exploring what are programming\nparadigms. Well, programming paradigms are a way to classify\nprogramming languages based on their features. And there are a lot of paradigms that exist\nin the world of programming. Two of the most common programming paradigms\nare: 1 - Object-Oriented Programming 2 - Procedural Programming So let us explore the differences\nbetween them. On the left, we have object-oriented programming\nparadigm. For simplicity, I will call it as OOP paradigm\nand on the right, we have procedural programming paradigm. In the case of OOP paradigm, the program is\ndivided into small parts known as objects. But on the right, the program is divided into\nsmall parts called functions. And this is one of the significant difference\nbetween these two paradigms. Just because OOP paradigm supports inheritance,\nwe can reuse the code to the maximum extent. But on the other hand, since we don’t have\nobjects and classes, support for inheritance is absent. So there is limited code reusability. Features like Function overloading is supported\nin OOP paradigm. But on the other side, it is not supported. In the OOP paradigm, access specifiers are\nsupported. While on the other hand they are not supported\nin procedural programming. Due to that, OOP paradigm is more secure. Because we can use access specifiers to decide\nwhich data should be hidden and which data should be exposed to the outside world. But in procedural paradigm, due to the lack\nof access specifiers, data is less secured. There is no proper way to hide data. This makes data to be treated on top priority\nin OOP paradigm. So data becomes more important than functions. But in procedural programming, since we don’t\nhave access specifiers and no proper data hiding mechanism, so we are only left with\ndealing with functions. So by default, all data becomes public and\nwe need to manage only functions to achieve our objective. Which is quite a limitation. Isn't it? And the languages such as C++, Java, Python,\nC# falls under the OOP paradigm. And languages such as C++, FORTRAN, Pascal,\nC, basic comes under procedural paradigm. So here, you can note that C++ supports both\nOOP paradigm as well as Procedural Paradigm. That’s why C++ is often referred to as a\nHybrid language. This might confuse you right now, looking\nat the differences between these two paradigms. So for more clarity in the next lesson, we\nwill explore in detail the difference between C and C++ language. See you there."
    },
    {
        "video_id": "OEfSFrk_KEI",
        "title": "14. The difference between procedural and object-oriented programming",
        "url": "https://www.youtube.com/watch?v=OEfSFrk_KEI",
        "duration": 267,
        "transcript": "In this next set of videos, we're going to\nwalk through various ideas around object-oriented programming and how to technically implement\na number of different techniques that are used within Drupal and also used across the\nboard on many object-oriented based projects. So at its core, object-oriented programming\nwill give you a better model of how to organize your code. Now, a lot of PHP programmers started\nby simply hacking away and trying to get something that's functional and what you end up with\nis something called procedural code. You have variables and you have functions, and the\nrole of the functions is to get from point A to point B. It's to complete some kind of\ntask. So for example, we might convert data from\none format to another or we might take some data in an array and organize it according\nto its alphabetical order. And the idea is that you're constructing your code so that\nyou step through these different procedures. Now, after you have some programming experience,\nyou start to realize that a lot of these functions can be generalized so you can use them in\nvarious other situations. So for example, if you have that function that sorts items\nin an array alphabetically, you might find that useful to convert other types of data\ninto an alphabetically ordered list. For example, some XML Or a set of strings. And as you start to think this way, your mind\nis actually going more towards object-oriented programming. You're thinking about these functions\nas these little machines that can be used in different situations, not just the original\nsituation that they were intended for. When you start to dive into tutorials about\nobject-oriented programming, you'll find that people use real world objects as examples\nbecause, in a big way, the world is very object-oriented. The idea is that as you look around you, you\nsee yourself surrounded by these different objects, and objects are basically anything\nthat you can give a noun to. So for example, right now I'm surrounded by\nmy computer, a glass of water, and a lamp. Because we can name each one of these things,\nthey are really objects. And in the real world, objects aren't limited in the way that they\ncan interact with one another. So for example, I can use the lamp to illuminate the keyboard\non my computer. I can use it to see through the glass of water that I have. I can take\nthe glass of water and dump it on the computer. And really, it keeps going but the idea is\nthat the interaction between the objects in our world are limited more by our imagination\nrather than any limitation in the object itself. Now, if you apply that idea to your code,\nthen what you should end up with are these components that can be used in ways that were\nunanticipated at the start because you have modeled the behavior of that item and contained\nit in an object. And it turns out that this is actually a pretty natural way for code\nto be organized. Now, the tricky part at first is taking that\nidea and seeing how it relates to code. Because most of the time when we're dealing with code,\nwe're dealing with kind of abstract concepts, we're dealing with things that don't have\na parallel in the physical world. For example, on a website, we have images,\nwe have forms, we have blocks of content across the page, and templates. We can call each\nof these things by their name which is a noun and that indicates, at least on some level,\nthat they're objects. In addition, there are objects that have more abstract ideas associated\nwith them. For example, a calculator that performs some operation on the data that gets\nsent to it or, in the example of our function that sorts alphabetically, we have a sorter. Those little bits of code are like machines\nand they're our inventions and we can give them whatever name we want, but they are objects\nthat didn't really exist before we created them. Now, if you don't immediately see the\napplication of this different way of looking at your code, that is, looking at it as objects\nrather than a set of procedures, that's okay. That sort of perspective comes from actually\nworking with it and seeing how the code is organized and what kind of benefits arise\nfrom organizing it in that different way. So just let some of those ideas start to percolate\nand we're going to start getting our hands dirty. And along the way, we'll talk about\nthe implications of thinking of your code along these lines."
    },
    {
        "video_id": "B5O52_w-4Zg",
        "title": "Ep13 - OOP vs Functional vs Procedural Programming Explained!",
        "url": "https://www.youtube.com/watch?v=B5O52_w-4Zg",
        "duration": 392,
        "transcript": "[Music] hey there sm when it comes to programming there are three types of paradigm procedural object orientated and functional in the early days of programming there's only procedural styled programming procedural codes are written as step-by-step instructions for example declaring a variable and writing an if statement here are procedural because we're just writing down the instructions in sequential order without any fancy magic although procedural style programming is simple it does have its shortcoming procedural code is very verbal that means it's very explicit because we need to write down the step-by-step instructions in a very detailed way and that makes procedural code very hard to read and lengthy which is not very convenient for us human to read and understand the code it is also very hard for us to reuse procedural code if we want to apply the same logic in multiple places in a lot of time the only way to do this is to copy and paste which is a big no-no so programmers eventually came out with a new paradigm called object-orientated programming to solve the issues of procedural programming now in object-orientated programming as the name suggests everything is based on objects so now instead of writing step-by-step instructions in one place we will delegate or separate the tasks into smaller chunks and put them into entities called object in other words we are hiding the programming logic within object and this concept is called encapsulation in object oriented programming so by splitting our logic into smaller modules it helps us to reuse and maintain our code better in the long run if something breaks we would know which object is causing the problem and we will just need to fix the logic inside that object rather than going through a few thousand lines of code and find out which line is causing the problem we actually have seen object-oriented programming in javascript a lot of times already for example the console.log function this is a perfect example to demonstrate object-oriented programming so the log function is living within the console object and a console object is a built-in object provided by javascript when we use this log function we don't really need to care about how it was implemented all the logic is hidden within the console object as the user all we need to know is that the log function will print out a line in the console and every time we need to log something in a console we just need to call this function from the console object over and over again in other words we can easily reuse this function across our program another example would be the getitem function from the local storage again the getitem function is just a function that lives within the local storage object we can keep reusing this function wherever we want without worrying about how it was implemented inside the local storage object can you see the benefit of object oriented programming now by hiding the logic within objects we can abstract away the complicated logic and just worry about how do we interact with these objects and it makes our code looks very very clean and easy to read the third paradigm functional programming relies very heavily on functions as the name suggests in functional programming we describe our programming logic using functions and the code will read very much like english functional code is very declarative that means just by reading the code we will know the intention right away i'll show you a quick example so suppose i have an array of fruits here and i want to convert every one of them into uppercase and then filter out the fruit that has less than four characters to achieve this in functional programming we'll call some of the javascript array helper functions that use functional programming techniques first i'll map each fruit into uppercase once i'm done i'll call the filter function on the result and filter out all the fruits that have more than four characters now looking at this code it reads a lot like english right and it tells us what it's doing in a very declarative way again we're simply mapping each fruit or converting each fruit into upper case and we're doing a filter when we tell javascript we only want the fruit that has more than four characters and that's the whole point of functional programming creating meaningful function so our code will be easier to read and cleaner if we were to achieve the same in an unfunctional way let's compare how it would look like against functional programming code first i'll create an empty array to store our result then i'll have a for loop to look through the fruits array and in each loop i'll check the length of the fruits if it is greater than 4 or not if yes then we'll push the uppercase fruit to our result array and now let's just stop here for a few moments and compare these two blocks of code the lower block is much more verbose than the upper block and we have to read and try to interpret it before we can understand the context of this code while the functional programming way tells us right away what the code is doing and that is the power of functional programming we are writing cleaner and clearer code and just one more time procedural programming is where we write our logic as step-by-step instructions object-oriented programming oop for short hides logic within objects and we call it encapsulation in programming terms functional programming or fp describe the logic using functions now at this point you might be asking which paradigm does javascript belongs to the answer is surprisingly none of them javascript is a very unique language it is actually based on something called the prototype we'll be discussing more about the prototype in a future video however javascript is a very flexible language and it does support the functional and object orientated style of programming and in the next few lessons we'll be looking exactly on object oriented programming in javascript so i'll see you there key takeaway for this lesson procedural programming is about writing logic as step by step instructions object orientated programming or oop for short is about splitting the logic or task into modular components known as objects so that you can easily reuse our logic functional programming relies heavily on functions and we describe our logic using functions javascript is a prototype based language however it does support features in object oriented programming and functional programming that's it for this lesson and i'll see you again in the next video if you enjoy the content of this video don't forget to hit the like subscribe and the bell icon for more content to come it will really help me out thanks for the support [Music] you"
    },
    {
        "video_id": "Sxkd_Qk29gA",
        "title": "What are the advantages of OOPS?",
        "url": "https://www.youtube.com/watch?v=Sxkd_Qk29gA",
        "duration": 59,
        "transcript": "what are the advantages of oops First Advantage is reuse of code through inheritance for example create one method in base class then reuse the method in multiple derived class without even rewriting the method second Advantage is flexibility of code using polymorphism for example same name method can do different things via overloading or overriding third Advantage is secure applications by using en capsulation meaning your data will only be accessible via the functions not without that because encapsulation is wrapping of data and function together next Advantage is oops based applications are easy to scale and from small to larger applications this means if you follow oops then you can add more and more functionalities in your application in future which is good for enterprise level applications"
    },
    {
        "video_id": "7DCy8ssiFIA",
        "title": "What are the advantages and limitations of OOPS ?",
        "url": "https://www.youtube.com/watch?v=7DCy8ssiFIA",
        "duration": 232,
        "transcript": "hey my name is happy I help candidates in net interview preparation after watching this video you will be able to answer this question in any interview if you have any confusion in any interview question then post in the comment section and I will make an video on it so let's start with this question when we say what are the advantages of oops that means we are asking about what are the advantages of the concepts of oops inherit polymorphism encapsulation and abstraction what are their advantages let's see few of them first Advantage is reuse of code through inheritance so by creating a single Base Class and multiple derived class from it you can avoid code duplication and can reuse the base class code in multiple derived class so this is one advantage of oops second Advantage is flexibility through polymorphis M for example same name methods can do different things so this is flexibility which overloading provides you so you are free to choose the best overloaded method version as per your need so that is the flexibility provided by the polymorphism next Advantage is security of data through data hiding and encapsulation meaning your fields and data are not accessible directly outside the class properties are there to create a wrapper over fields and make them secure so that is the advantage provided by the encapsulation next Advantage is if you have proper implementing Hoops Concept in your application your then your application is simple to upgrade from smaller to larger application so in future if new requirements or enhancements will come in your appliation then it is quite easy to accommodate those changes in your application rather than recreating the application from the scratch so that is one benefit of oops then next Advantage is modularity modularity for easier troubleshooting uh that means uh if you divide your application into separate classes then you will easily identify that if any problem will occur then in which class that problem is and that that the problem is easy to fix then because your program or your application is divided into small small applications so these are some of the main advantages of the oops now the next part of the question is what are the limitations of oops in my experience when you are working in a very small application then uh do not try to apply all concepts of oops because because you know uh oops implementation needs proper planning and proper planning needs time so if your application is really small then why to take this overhead just go and create it in 2 3 days or a week so I hope uh you are now clear about the advantages and disadvantages of the oops so I I so in the interview you can simply tell three four advantage and a single disadvantage is enough to create a good impression if you have any question on this uh question then please post in the comment section and I will try to reply soon [Music]"
    },
    {
        "video_id": "eFcuVyR6oQU",
        "title": "C++ Programming - Advantage &amp; Disadvantage of OOPs",
        "url": "https://www.youtube.com/watch?v=eFcuVyR6oQU",
        "duration": 171,
        "transcript": "hi everyone i am shrimadi from second bhz informational technology i am talking about advantage and disadvantage of oops in c plus programming introduction object overliner program is the principle of designing and development of program using modular approach object-oriented programming approach private advantage in traditional and development of software for real life application the base requirements of object-oriented programming is the data the programs are building by counting data and function that operated on the data some of the oops language or c plus plus java python and etc update oriented programming object oriented programming is a concept that combines both the data under the function that operated on that data into a single unit called the object and object is a collection of shaped of data kind of as member data under function that operated on this data canara's member function who follows bottom of descending technique oops first one object second one class paid one inheritance fourth one polymorphism fifth one abstraction sixty-one encapsulation advantage of foods the programs are modernized based on the principle of urged and object linking code and both always the related object to share the command code this reduced code duplication and code receivability creation and implementation of oop code is easy to reduce is easy to reduce software development time the concept of data abstraction spreads to object specify and object implementation data in caps listing also also with function therefore external non-member function cannot access or modifying data this provides data security disadvantage of oops layer programming size oops typically involving more line of code than protruder program server programs oops typically solver then procure based program as then typically reduced more instruction to be executed not suitable for all types for programs to convert india real-world program into an object-oriented model is difficult polymorphism and dynamic binding also reduced processing time due to overload of functions called during run time application of groups computer graphics application cad or cm software object oriented database user interface designing such as windows real-time system simulation and modeling i"
    },
    {
        "video_id": "HLWl-Q4HUoc",
        "title": "JAVA OOPs | Clear Your OOPs Concept With Real World Examples | Object Oriented Programming | Class#2",
        "url": "https://www.youtube.com/watch?v=HLWl-Q4HUoc",
        "duration": 517,
        "transcript": "it can be Birds it can be cars or anything that exists in real world all these entity we can call as an object [Music] today we will learn object oriented programming or Ops concept oops basically based on these six concept object class encapsulations abstractions inheritance polymorphism so today we will learn all these six concept with some real world example so our first concept is object so what is object so in objected oriented programming object is nothing but any real world entity what it's mean any real world entity mean anything that exists in real world so it can be employee it can be fruits it can be animal it can be Birds it can be curse or anything that exists in real world all these entity we can call as an object now if you think all this object has Summits properties and also some of its Behavior so take an example let's say animal so it has some name it has some color and also it has some Behavior like its noise similarly if we take employee so employee can have some name it has employee ID it has some Behavior right show any real world entity is called object and object have some its states or it's called properties and also has its some Behavior now all these behavior of an object can be defined in a template and this template or this blue fin is called class in objected oriented programming what is mean what is template what is blue pin so let's take this example so fruits so you can see in this diagram fruits have some Properties or data or some field called is name and color similarly fruits has some Behavior or method called as test right so if you consider these fruits or if we consider any instance of food let's say this is a instance of fruit so we have a blueprint we have a you know template of fruits and if we take a instance mango so this fruit's name is mango what it's color color is green what is test so is taste it's let's say sweet so you can see in our objected oriented programming we have a class and this class instance is nothing but our object now let's go to the next concept so you can see it's called encapsulations so if you check this real world example this is nothing but a capsule which basically wrapping multiple material in one cap so that's why it's a capsule so similarly this concept used in objected oriented programming which we called encapsulations which is a process of wrapping up data or properties and Method or behavior that we just learned for class template or object so this process this encapsulation forces actually wrapping this data or properties and Method or behavior in a single unit called class show this encapsulations real world example is a capsule now coming to the next concept that is called abstractions so think about that when you go to any ATMs so you can withdraw your money you can print mini statement right but do you really have to think about the background process no right you put some instructions on ATM and 8 give you money you put some instructions on ATM and it's been some mini statement so this concept is called abstractions in objected oriented programming what's mean so you think about this withdrawal or print mini Statesman here you don't have to bother about the background logic right so abstractions is nothing but representing essential features without including the background and the same thing we can see in our ATM machine right so this ATM machine is a real world example of objected oriented programming abstractions concept now coming to the next concept which is called inheritance so let's take this diagram so let's say bird and bird have two type one is flying bird one is swimming bird now birds can have properties like name and color and this flying bird or Swimming Bird basically inherit these two properties name and color and also it has its own property like flying speed and for sewing bird swimming speed so it's mean flying bird has its own properties flying speed and also it inherits the other two properties from its parent which is called name and colors same for the swimming Birds show what it's mean so it is nothing but a inheritance and an inheritance is a process by which one class can acquire the property of other class so if we take these a blueprint template or class if if we take these two as a template blueprint or class so you can see here this class or this class inherits the properties of this class so this is nothing called a inheritance Concept in object oriented programming now coming to the next concept so in this next concept this is called polymorphism so before going to this definition just check this diagram we have an email and it has a behavior called sound or we can say noise now animal of these two type one is dog and one is cat both can sound both can noise but they are based on their type their voice can be different so dog has different voice and similarly cat has its different voice so that's mean they have the same behavior sound but based on their type execute differently so this is nothing but or this concept is nothing but a polymer Visions so polymorphism means ability to take more than one form or in other terms we can say we can say different behavior in different instance so the behavior of sound for this instance that is called dog a different and similarly for cat the sound is different so different behavior in different instance so this is nothing but polymorphism I believe this video has helped you to understand about the topic thank you for watching please do subscribe click on the Bell notifications and select all so that you don't miss any video from this channel [Music]"
    },
    {
        "video_id": "towMX5TV568",
        "title": "Abstraction with real life example #shorts #short #java #abstraction #oop #CodeVerse #shorts",
        "url": "https://www.youtube.com/watch?v=towMX5TV568",
        "duration": 35,
        "transcript": "can you explain abstraction with the real life example consider the example of YouTube video YouTube shows only relevant information to user like the title of video views likes and comments and YouTube hides the confidential or irrelevant information like what is the idea of video country of original video and which complex algorithm YouTube has used to recommend this video to us so abstraction is a mechanism that allows us to hide irrelevant or confidential information from user so user will have access to only essential details we can achieve abstraction using many ways like abstract class access modifier you can check out my videos on YouTube for it"
    },
    {
        "video_id": "a7tV_n3Rr18",
        "title": "OOPs Concepts with real world example #oops #programming",
        "url": "https://www.youtube.com/watch?v=a7tV_n3Rr18",
        "duration": 271,
        "transcript": "hello friends welcome back to replacement with roy i hope you are doing well today we will see about the oops concepts which is object-oriented programming system and maintenance with real world example it is very important concept which have we have to know or which can be asked in the what i have seen many times the interview asks these questions with the main concept and one real world example with it now we will see what is oops who stands for object oriented programming system it is a paradigm that uses objects and classes now we will see what are the main concepts of groups class there is a class object inheritance we have encapsulations we have polymorphism abstraction now we will see what are the classes a classes are user defined data type that act as the blueprint for individual objects attributes and methods i want to tell you one example based on the classes which is a real world example we can consider car as the class that has characteristics like steering wheels etc and this is the syntax of the class and we are assigning the class as a keyword and we are using the class name as a user defined name and in the block of class or the function as a specifier what is access specifier it behaves like keyword in oops that says the accessibility of classes and methods it can be private public or protected or the members are the variables to be used now what are the objects and objects are the energy that has a state and behavior associated with it it may be mouse keyboard etc of the class computer integers it may be strings integers floating point numbers arrays and dictionaries as we have seen that a class is the object is a collection of objects in the previous slide i want to tell you one example based on the object we can consider a dog is an object of class animal and this is the syntax you can see on the screen this class class name and we are assigning the object as a name one and object to we can assign many objects in the class one in the one class now we will see what are the inherent inheritance i need it everyone know that what is inheritance in science just same here as well in the programming and inheritance is the capability of one class to inherit property from another class i want to tell you one example based on it which is a real world example let's assume that there is a class as vehicle we can consider we can inherit common properties like color size type from a parent vehicle class and i want to tell you one more example based on it like everyone knows that when the man and woman inherited the child has the same property of some properties of man and some properties of women and this is the syntax of inheritance now what is polymorphism a polyphonicism simply means object having many forms now now i want to tell you one example based on it we need to determine if the given species of bird fly or not using polymorphism we can do this using a single function i i want to tell you one example or which is a real world example based on it a man at the same time he's a father he's a father he's a husband and he is an employer as well so the same person possesses different behavior in the different situation then in encapsulation and encapsulation is one of the fundamental concepts in hopes it describes the idea of wrapping data and methods that work on data within one unit and i want i want to tell you one example which is our daily life example when you login into your email account there is a lot of internal process taking place in the backend and you have control it no you cannot control it and this is the syntax and the example of encapsulation if you get some knowledge out of it please do like share with your friends and don't forget to subscribe the channel and if you have any doubt please comment below thanks you"
    }
]